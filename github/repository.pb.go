// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: repository.proto

package github

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/protobuf/gogoproto"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type Repository struct {
	Id               int32                 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Owner            *User                 `protobuf:"bytes,2,opt,name=owner" json:"owner,omitempty"`
	Name             string                `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	FullName         string                `protobuf:"bytes,4,opt,name=full_name,json=fullName,proto3" json:"full_name,omitempty"`
	Description      string                `protobuf:"bytes,5,opt,name=description,proto3" json:"description,omitempty"`
	Private          bool                  `protobuf:"varint,6,opt,name=private,proto3" json:"private,omitempty"`
	Fork             bool                  `protobuf:"varint,7,opt,name=fork,proto3" json:"fork,omitempty"`
	Url              string                `protobuf:"bytes,8,opt,name=url,proto3" json:"url,omitempty"`
	HtmlUrl          string                `protobuf:"bytes,9,opt,name=html_url,json=htmlUrl,proto3" json:"html_url,omitempty"`
	ArchiveUrl       string                `protobuf:"bytes,10,opt,name=archive_url,json=archiveUrl,proto3" json:"archive_url,omitempty"`
	AssigneesUrl     string                `protobuf:"bytes,11,opt,name=assignees_url,json=assigneesUrl,proto3" json:"assignees_url,omitempty"`
	BlobsUrl         string                `protobuf:"bytes,12,opt,name=blobs_url,json=blobsUrl,proto3" json:"blobs_url,omitempty"`
	BranchesUrl      string                `protobuf:"bytes,13,opt,name=branches_url,json=branchesUrl,proto3" json:"branches_url,omitempty"`
	CloneUrl         string                `protobuf:"bytes,14,opt,name=clone_url,json=cloneUrl,proto3" json:"clone_url,omitempty"`
	CollaboratorsUrl string                `protobuf:"bytes,15,opt,name=collaborators_url,json=collaboratorsUrl,proto3" json:"collaborators_url,omitempty"`
	CommentsUrl      string                `protobuf:"bytes,16,opt,name=comments_url,json=commentsUrl,proto3" json:"comments_url,omitempty"`
	CommitsUrl       string                `protobuf:"bytes,17,opt,name=commits_url,json=commitsUrl,proto3" json:"commits_url,omitempty"`
	CompareUrl       string                `protobuf:"bytes,18,opt,name=compare_url,json=compareUrl,proto3" json:"compare_url,omitempty"`
	ContentsUrl      string                `protobuf:"bytes,19,opt,name=contents_url,json=contentsUrl,proto3" json:"contents_url,omitempty"`
	ContributorsUrl  string                `protobuf:"bytes,20,opt,name=contributors_url,json=contributorsUrl,proto3" json:"contributors_url,omitempty"`
	DeploymentsUrl   string                `protobuf:"bytes,21,opt,name=deployments_url,json=deploymentsUrl,proto3" json:"deployments_url,omitempty"`
	DownloadsUrl     string                `protobuf:"bytes,22,opt,name=downloads_url,json=downloadsUrl,proto3" json:"downloads_url,omitempty"`
	EventsUrl        string                `protobuf:"bytes,23,opt,name=events_url,json=eventsUrl,proto3" json:"events_url,omitempty"`
	ForksUrl         string                `protobuf:"bytes,24,opt,name=forks_url,json=forksUrl,proto3" json:"forks_url,omitempty"`
	GitCommitsUrl    string                `protobuf:"bytes,25,opt,name=git_commits_url,json=gitCommitsUrl,proto3" json:"git_commits_url,omitempty"`
	GitRefsUrl       string                `protobuf:"bytes,26,opt,name=git_refs_url,json=gitRefsUrl,proto3" json:"git_refs_url,omitempty"`
	GitTagsUrl       string                `protobuf:"bytes,27,opt,name=git_tags_url,json=gitTagsUrl,proto3" json:"git_tags_url,omitempty"`
	GitUrl           string                `protobuf:"bytes,28,opt,name=git_url,json=gitUrl,proto3" json:"git_url,omitempty"`
	HooksUrl         string                `protobuf:"bytes,29,opt,name=hooks_url,json=hooksUrl,proto3" json:"hooks_url,omitempty"`
	IssueCommentUrl  string                `protobuf:"bytes,30,opt,name=issue_comment_url,json=issueCommentUrl,proto3" json:"issue_comment_url,omitempty"`
	IssueEventsUrl   string                `protobuf:"bytes,31,opt,name=issue_events_url,json=issueEventsUrl,proto3" json:"issue_events_url,omitempty"`
	IssuesUrl        string                `protobuf:"bytes,32,opt,name=issues_url,json=issuesUrl,proto3" json:"issues_url,omitempty"`
	KeysUrl          string                `protobuf:"bytes,33,opt,name=keys_url,json=keysUrl,proto3" json:"keys_url,omitempty"`
	LabelsUrl        string                `protobuf:"bytes,34,opt,name=labels_url,json=labelsUrl,proto3" json:"labels_url,omitempty"`
	LanguagesUrl     string                `protobuf:"bytes,35,opt,name=languages_url,json=languagesUrl,proto3" json:"languages_url,omitempty"`
	MergesUrl        string                `protobuf:"bytes,36,opt,name=merges_url,json=mergesUrl,proto3" json:"merges_url,omitempty"`
	MilestonesUrl    string                `protobuf:"bytes,37,opt,name=milestones_url,json=milestonesUrl,proto3" json:"milestones_url,omitempty"`
	MirrorUrl        string                `protobuf:"bytes,38,opt,name=mirror_url,json=mirrorUrl,proto3" json:"mirror_url,omitempty"`
	NotificationsUrl string                `protobuf:"bytes,39,opt,name=notifications_url,json=notificationsUrl,proto3" json:"notifications_url,omitempty"`
	PullsUrl         string                `protobuf:"bytes,40,opt,name=pulls_url,json=pullsUrl,proto3" json:"pulls_url,omitempty"`
	ReleasesUrl      string                `protobuf:"bytes,41,opt,name=releases_url,json=releasesUrl,proto3" json:"releases_url,omitempty"`
	SshUrl           string                `protobuf:"bytes,42,opt,name=ssh_url,json=sshUrl,proto3" json:"ssh_url,omitempty"`
	StargazersUrl    string                `protobuf:"bytes,43,opt,name=stargazers_url,json=stargazersUrl,proto3" json:"stargazers_url,omitempty"`
	StatusesUrl      string                `protobuf:"bytes,44,opt,name=statuses_url,json=statusesUrl,proto3" json:"statuses_url,omitempty"`
	SubscribersUrl   string                `protobuf:"bytes,45,opt,name=subscribers_url,json=subscribersUrl,proto3" json:"subscribers_url,omitempty"`
	SubscriptionUrl  string                `protobuf:"bytes,46,opt,name=subscription_url,json=subscriptionUrl,proto3" json:"subscription_url,omitempty"`
	SvnUrl           string                `protobuf:"bytes,47,opt,name=svn_url,json=svnUrl,proto3" json:"svn_url,omitempty"`
	TagsUrl          string                `protobuf:"bytes,48,opt,name=tags_url,json=tagsUrl,proto3" json:"tags_url,omitempty"`
	TeamsUrl         string                `protobuf:"bytes,49,opt,name=teams_url,json=teamsUrl,proto3" json:"teams_url,omitempty"`
	TreesUrl         string                `protobuf:"bytes,50,opt,name=trees_url,json=treesUrl,proto3" json:"trees_url,omitempty"`
	Homepage         string                `protobuf:"bytes,51,opt,name=homepage,proto3" json:"homepage,omitempty"`
	Language         string                `protobuf:"bytes,52,opt,name=language,proto3" json:"language,omitempty"`
	ForksCount       int32                 `protobuf:"varint,53,opt,name=forks_count,json=forksCount,proto3" json:"forks_count,omitempty"`
	StargazersCount  int32                 `protobuf:"varint,54,opt,name=stargazers_count,json=stargazersCount,proto3" json:"stargazers_count,omitempty"`
	WatchersCount    int32                 `protobuf:"varint,55,opt,name=watchers_count,json=watchersCount,proto3" json:"watchers_count,omitempty"`
	NetworkCount     int32                 `protobuf:"varint,56,opt,name=network_count,json=networkCount,proto3" json:"network_count,omitempty"`
	RepoSize         int32                 `protobuf:"varint,57,opt,name=size,proto3" json:"size,omitempty"`
	DefaultBranch    string                `protobuf:"bytes,58,opt,name=default_branch,json=defaultBranch,proto3" json:"default_branch,omitempty"`
	OpenIssuesCount  int32                 `protobuf:"varint,59,opt,name=open_issues_count,json=openIssuesCount,proto3" json:"open_issues_count,omitempty"`
	HasIssues        bool                  `protobuf:"varint,60,opt,name=has_issues,json=hasIssues,proto3" json:"has_issues,omitempty"`
	HasWiki          bool                  `protobuf:"varint,61,opt,name=has_wiki,json=hasWiki,proto3" json:"has_wiki,omitempty"`
	HasPages         bool                  `protobuf:"varint,62,opt,name=has_pages,json=hasPages,proto3" json:"has_pages,omitempty"`
	HasDownloads     bool                  `protobuf:"varint,63,opt,name=has_downloads,json=hasDownloads,proto3" json:"has_downloads,omitempty"`
	PushedAt         string                `protobuf:"bytes,64,opt,name=pushed_at,json=pushedAt,proto3" json:"pushed_at,omitempty"`
	CreatedAt        string                `protobuf:"bytes,65,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	UpdatedAt        string                `protobuf:"bytes,66,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
	Permissions      *RepositoryPermission `protobuf:"bytes,67,opt,name=permissions" json:"permissions,omitempty"`
	SubscribersCount int32                 `protobuf:"varint,68,opt,name=subscribers_count,json=subscribersCount,proto3" json:"subscribers_count,omitempty"`
	Organization     *User                 `protobuf:"bytes,69,opt,name=organization" json:"organization,omitempty"`
	Parent           *Repository           `protobuf:"bytes,70,opt,name=parent" json:"parent,omitempty"`
	Source           *Repository           `protobuf:"bytes,71,opt,name=source" json:"source,omitempty"`
	//  application/vnd.github.polaris-preview
	AllowRebaseMerge bool   `protobuf:"varint,72,opt,name=allow_rebase_merge,json=allowRebaseMerge,proto3" json:"allow_rebase_merge,omitempty"`
	AllowSquashMerge bool   `protobuf:"varint,73,opt,name=allow_squash_merge,json=allowSquashMerge,proto3" json:"allow_squash_merge,omitempty"`
	AllowMergeCommit bool   `protobuf:"varint,74,opt,name=allow_merge_commit,json=allowMergeCommit,proto3" json:"allow_merge_commit,omitempty"`
	Archived         bool   `protobuf:"varint,75,opt,name=archived,proto3" json:"archived,omitempty"`
	HasProjects      bool   `protobuf:"varint,76,opt,name=has_projects,json=hasProjects,proto3" json:"has_projects,omitempty"`
	License          string `protobuf:"bytes,77,opt,name=license,proto3" json:"license,omitempty"`
}

func (m *Repository) Reset()                    { *m = Repository{} }
func (m *Repository) String() string            { return proto.CompactTextString(m) }
func (*Repository) ProtoMessage()               {}
func (*Repository) Descriptor() ([]byte, []int) { return fileDescriptorRepository, []int{0} }

func init() {
	proto.RegisterType((*Repository)(nil), "github.Repository")
}
func (m *Repository) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Repository) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintRepository(dAtA, i, uint64(m.Id))
	}
	if m.Owner != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintRepository(dAtA, i, uint64(m.Owner.Size()))
		n1, err := m.Owner.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	if len(m.Name) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintRepository(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	if len(m.FullName) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintRepository(dAtA, i, uint64(len(m.FullName)))
		i += copy(dAtA[i:], m.FullName)
	}
	if len(m.Description) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintRepository(dAtA, i, uint64(len(m.Description)))
		i += copy(dAtA[i:], m.Description)
	}
	if m.Private {
		dAtA[i] = 0x30
		i++
		if m.Private {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.Fork {
		dAtA[i] = 0x38
		i++
		if m.Fork {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if len(m.Url) > 0 {
		dAtA[i] = 0x42
		i++
		i = encodeVarintRepository(dAtA, i, uint64(len(m.Url)))
		i += copy(dAtA[i:], m.Url)
	}
	if len(m.HtmlUrl) > 0 {
		dAtA[i] = 0x4a
		i++
		i = encodeVarintRepository(dAtA, i, uint64(len(m.HtmlUrl)))
		i += copy(dAtA[i:], m.HtmlUrl)
	}
	if len(m.ArchiveUrl) > 0 {
		dAtA[i] = 0x52
		i++
		i = encodeVarintRepository(dAtA, i, uint64(len(m.ArchiveUrl)))
		i += copy(dAtA[i:], m.ArchiveUrl)
	}
	if len(m.AssigneesUrl) > 0 {
		dAtA[i] = 0x5a
		i++
		i = encodeVarintRepository(dAtA, i, uint64(len(m.AssigneesUrl)))
		i += copy(dAtA[i:], m.AssigneesUrl)
	}
	if len(m.BlobsUrl) > 0 {
		dAtA[i] = 0x62
		i++
		i = encodeVarintRepository(dAtA, i, uint64(len(m.BlobsUrl)))
		i += copy(dAtA[i:], m.BlobsUrl)
	}
	if len(m.BranchesUrl) > 0 {
		dAtA[i] = 0x6a
		i++
		i = encodeVarintRepository(dAtA, i, uint64(len(m.BranchesUrl)))
		i += copy(dAtA[i:], m.BranchesUrl)
	}
	if len(m.CloneUrl) > 0 {
		dAtA[i] = 0x72
		i++
		i = encodeVarintRepository(dAtA, i, uint64(len(m.CloneUrl)))
		i += copy(dAtA[i:], m.CloneUrl)
	}
	if len(m.CollaboratorsUrl) > 0 {
		dAtA[i] = 0x7a
		i++
		i = encodeVarintRepository(dAtA, i, uint64(len(m.CollaboratorsUrl)))
		i += copy(dAtA[i:], m.CollaboratorsUrl)
	}
	if len(m.CommentsUrl) > 0 {
		dAtA[i] = 0x82
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintRepository(dAtA, i, uint64(len(m.CommentsUrl)))
		i += copy(dAtA[i:], m.CommentsUrl)
	}
	if len(m.CommitsUrl) > 0 {
		dAtA[i] = 0x8a
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintRepository(dAtA, i, uint64(len(m.CommitsUrl)))
		i += copy(dAtA[i:], m.CommitsUrl)
	}
	if len(m.CompareUrl) > 0 {
		dAtA[i] = 0x92
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintRepository(dAtA, i, uint64(len(m.CompareUrl)))
		i += copy(dAtA[i:], m.CompareUrl)
	}
	if len(m.ContentsUrl) > 0 {
		dAtA[i] = 0x9a
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintRepository(dAtA, i, uint64(len(m.ContentsUrl)))
		i += copy(dAtA[i:], m.ContentsUrl)
	}
	if len(m.ContributorsUrl) > 0 {
		dAtA[i] = 0xa2
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintRepository(dAtA, i, uint64(len(m.ContributorsUrl)))
		i += copy(dAtA[i:], m.ContributorsUrl)
	}
	if len(m.DeploymentsUrl) > 0 {
		dAtA[i] = 0xaa
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintRepository(dAtA, i, uint64(len(m.DeploymentsUrl)))
		i += copy(dAtA[i:], m.DeploymentsUrl)
	}
	if len(m.DownloadsUrl) > 0 {
		dAtA[i] = 0xb2
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintRepository(dAtA, i, uint64(len(m.DownloadsUrl)))
		i += copy(dAtA[i:], m.DownloadsUrl)
	}
	if len(m.EventsUrl) > 0 {
		dAtA[i] = 0xba
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintRepository(dAtA, i, uint64(len(m.EventsUrl)))
		i += copy(dAtA[i:], m.EventsUrl)
	}
	if len(m.ForksUrl) > 0 {
		dAtA[i] = 0xc2
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintRepository(dAtA, i, uint64(len(m.ForksUrl)))
		i += copy(dAtA[i:], m.ForksUrl)
	}
	if len(m.GitCommitsUrl) > 0 {
		dAtA[i] = 0xca
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintRepository(dAtA, i, uint64(len(m.GitCommitsUrl)))
		i += copy(dAtA[i:], m.GitCommitsUrl)
	}
	if len(m.GitRefsUrl) > 0 {
		dAtA[i] = 0xd2
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintRepository(dAtA, i, uint64(len(m.GitRefsUrl)))
		i += copy(dAtA[i:], m.GitRefsUrl)
	}
	if len(m.GitTagsUrl) > 0 {
		dAtA[i] = 0xda
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintRepository(dAtA, i, uint64(len(m.GitTagsUrl)))
		i += copy(dAtA[i:], m.GitTagsUrl)
	}
	if len(m.GitUrl) > 0 {
		dAtA[i] = 0xe2
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintRepository(dAtA, i, uint64(len(m.GitUrl)))
		i += copy(dAtA[i:], m.GitUrl)
	}
	if len(m.HooksUrl) > 0 {
		dAtA[i] = 0xea
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintRepository(dAtA, i, uint64(len(m.HooksUrl)))
		i += copy(dAtA[i:], m.HooksUrl)
	}
	if len(m.IssueCommentUrl) > 0 {
		dAtA[i] = 0xf2
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintRepository(dAtA, i, uint64(len(m.IssueCommentUrl)))
		i += copy(dAtA[i:], m.IssueCommentUrl)
	}
	if len(m.IssueEventsUrl) > 0 {
		dAtA[i] = 0xfa
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintRepository(dAtA, i, uint64(len(m.IssueEventsUrl)))
		i += copy(dAtA[i:], m.IssueEventsUrl)
	}
	if len(m.IssuesUrl) > 0 {
		dAtA[i] = 0x82
		i++
		dAtA[i] = 0x2
		i++
		i = encodeVarintRepository(dAtA, i, uint64(len(m.IssuesUrl)))
		i += copy(dAtA[i:], m.IssuesUrl)
	}
	if len(m.KeysUrl) > 0 {
		dAtA[i] = 0x8a
		i++
		dAtA[i] = 0x2
		i++
		i = encodeVarintRepository(dAtA, i, uint64(len(m.KeysUrl)))
		i += copy(dAtA[i:], m.KeysUrl)
	}
	if len(m.LabelsUrl) > 0 {
		dAtA[i] = 0x92
		i++
		dAtA[i] = 0x2
		i++
		i = encodeVarintRepository(dAtA, i, uint64(len(m.LabelsUrl)))
		i += copy(dAtA[i:], m.LabelsUrl)
	}
	if len(m.LanguagesUrl) > 0 {
		dAtA[i] = 0x9a
		i++
		dAtA[i] = 0x2
		i++
		i = encodeVarintRepository(dAtA, i, uint64(len(m.LanguagesUrl)))
		i += copy(dAtA[i:], m.LanguagesUrl)
	}
	if len(m.MergesUrl) > 0 {
		dAtA[i] = 0xa2
		i++
		dAtA[i] = 0x2
		i++
		i = encodeVarintRepository(dAtA, i, uint64(len(m.MergesUrl)))
		i += copy(dAtA[i:], m.MergesUrl)
	}
	if len(m.MilestonesUrl) > 0 {
		dAtA[i] = 0xaa
		i++
		dAtA[i] = 0x2
		i++
		i = encodeVarintRepository(dAtA, i, uint64(len(m.MilestonesUrl)))
		i += copy(dAtA[i:], m.MilestonesUrl)
	}
	if len(m.MirrorUrl) > 0 {
		dAtA[i] = 0xb2
		i++
		dAtA[i] = 0x2
		i++
		i = encodeVarintRepository(dAtA, i, uint64(len(m.MirrorUrl)))
		i += copy(dAtA[i:], m.MirrorUrl)
	}
	if len(m.NotificationsUrl) > 0 {
		dAtA[i] = 0xba
		i++
		dAtA[i] = 0x2
		i++
		i = encodeVarintRepository(dAtA, i, uint64(len(m.NotificationsUrl)))
		i += copy(dAtA[i:], m.NotificationsUrl)
	}
	if len(m.PullsUrl) > 0 {
		dAtA[i] = 0xc2
		i++
		dAtA[i] = 0x2
		i++
		i = encodeVarintRepository(dAtA, i, uint64(len(m.PullsUrl)))
		i += copy(dAtA[i:], m.PullsUrl)
	}
	if len(m.ReleasesUrl) > 0 {
		dAtA[i] = 0xca
		i++
		dAtA[i] = 0x2
		i++
		i = encodeVarintRepository(dAtA, i, uint64(len(m.ReleasesUrl)))
		i += copy(dAtA[i:], m.ReleasesUrl)
	}
	if len(m.SshUrl) > 0 {
		dAtA[i] = 0xd2
		i++
		dAtA[i] = 0x2
		i++
		i = encodeVarintRepository(dAtA, i, uint64(len(m.SshUrl)))
		i += copy(dAtA[i:], m.SshUrl)
	}
	if len(m.StargazersUrl) > 0 {
		dAtA[i] = 0xda
		i++
		dAtA[i] = 0x2
		i++
		i = encodeVarintRepository(dAtA, i, uint64(len(m.StargazersUrl)))
		i += copy(dAtA[i:], m.StargazersUrl)
	}
	if len(m.StatusesUrl) > 0 {
		dAtA[i] = 0xe2
		i++
		dAtA[i] = 0x2
		i++
		i = encodeVarintRepository(dAtA, i, uint64(len(m.StatusesUrl)))
		i += copy(dAtA[i:], m.StatusesUrl)
	}
	if len(m.SubscribersUrl) > 0 {
		dAtA[i] = 0xea
		i++
		dAtA[i] = 0x2
		i++
		i = encodeVarintRepository(dAtA, i, uint64(len(m.SubscribersUrl)))
		i += copy(dAtA[i:], m.SubscribersUrl)
	}
	if len(m.SubscriptionUrl) > 0 {
		dAtA[i] = 0xf2
		i++
		dAtA[i] = 0x2
		i++
		i = encodeVarintRepository(dAtA, i, uint64(len(m.SubscriptionUrl)))
		i += copy(dAtA[i:], m.SubscriptionUrl)
	}
	if len(m.SvnUrl) > 0 {
		dAtA[i] = 0xfa
		i++
		dAtA[i] = 0x2
		i++
		i = encodeVarintRepository(dAtA, i, uint64(len(m.SvnUrl)))
		i += copy(dAtA[i:], m.SvnUrl)
	}
	if len(m.TagsUrl) > 0 {
		dAtA[i] = 0x82
		i++
		dAtA[i] = 0x3
		i++
		i = encodeVarintRepository(dAtA, i, uint64(len(m.TagsUrl)))
		i += copy(dAtA[i:], m.TagsUrl)
	}
	if len(m.TeamsUrl) > 0 {
		dAtA[i] = 0x8a
		i++
		dAtA[i] = 0x3
		i++
		i = encodeVarintRepository(dAtA, i, uint64(len(m.TeamsUrl)))
		i += copy(dAtA[i:], m.TeamsUrl)
	}
	if len(m.TreesUrl) > 0 {
		dAtA[i] = 0x92
		i++
		dAtA[i] = 0x3
		i++
		i = encodeVarintRepository(dAtA, i, uint64(len(m.TreesUrl)))
		i += copy(dAtA[i:], m.TreesUrl)
	}
	if len(m.Homepage) > 0 {
		dAtA[i] = 0x9a
		i++
		dAtA[i] = 0x3
		i++
		i = encodeVarintRepository(dAtA, i, uint64(len(m.Homepage)))
		i += copy(dAtA[i:], m.Homepage)
	}
	if len(m.Language) > 0 {
		dAtA[i] = 0xa2
		i++
		dAtA[i] = 0x3
		i++
		i = encodeVarintRepository(dAtA, i, uint64(len(m.Language)))
		i += copy(dAtA[i:], m.Language)
	}
	if m.ForksCount != 0 {
		dAtA[i] = 0xa8
		i++
		dAtA[i] = 0x3
		i++
		i = encodeVarintRepository(dAtA, i, uint64(m.ForksCount))
	}
	if m.StargazersCount != 0 {
		dAtA[i] = 0xb0
		i++
		dAtA[i] = 0x3
		i++
		i = encodeVarintRepository(dAtA, i, uint64(m.StargazersCount))
	}
	if m.WatchersCount != 0 {
		dAtA[i] = 0xb8
		i++
		dAtA[i] = 0x3
		i++
		i = encodeVarintRepository(dAtA, i, uint64(m.WatchersCount))
	}
	if m.NetworkCount != 0 {
		dAtA[i] = 0xc0
		i++
		dAtA[i] = 0x3
		i++
		i = encodeVarintRepository(dAtA, i, uint64(m.NetworkCount))
	}
	if m.RepoSize != 0 {
		dAtA[i] = 0xc8
		i++
		dAtA[i] = 0x3
		i++
		i = encodeVarintRepository(dAtA, i, uint64(m.RepoSize))
	}
	if len(m.DefaultBranch) > 0 {
		dAtA[i] = 0xd2
		i++
		dAtA[i] = 0x3
		i++
		i = encodeVarintRepository(dAtA, i, uint64(len(m.DefaultBranch)))
		i += copy(dAtA[i:], m.DefaultBranch)
	}
	if m.OpenIssuesCount != 0 {
		dAtA[i] = 0xd8
		i++
		dAtA[i] = 0x3
		i++
		i = encodeVarintRepository(dAtA, i, uint64(m.OpenIssuesCount))
	}
	if m.HasIssues {
		dAtA[i] = 0xe0
		i++
		dAtA[i] = 0x3
		i++
		if m.HasIssues {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.HasWiki {
		dAtA[i] = 0xe8
		i++
		dAtA[i] = 0x3
		i++
		if m.HasWiki {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.HasPages {
		dAtA[i] = 0xf0
		i++
		dAtA[i] = 0x3
		i++
		if m.HasPages {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.HasDownloads {
		dAtA[i] = 0xf8
		i++
		dAtA[i] = 0x3
		i++
		if m.HasDownloads {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if len(m.PushedAt) > 0 {
		dAtA[i] = 0x82
		i++
		dAtA[i] = 0x4
		i++
		i = encodeVarintRepository(dAtA, i, uint64(len(m.PushedAt)))
		i += copy(dAtA[i:], m.PushedAt)
	}
	if len(m.CreatedAt) > 0 {
		dAtA[i] = 0x8a
		i++
		dAtA[i] = 0x4
		i++
		i = encodeVarintRepository(dAtA, i, uint64(len(m.CreatedAt)))
		i += copy(dAtA[i:], m.CreatedAt)
	}
	if len(m.UpdatedAt) > 0 {
		dAtA[i] = 0x92
		i++
		dAtA[i] = 0x4
		i++
		i = encodeVarintRepository(dAtA, i, uint64(len(m.UpdatedAt)))
		i += copy(dAtA[i:], m.UpdatedAt)
	}
	if m.Permissions != nil {
		dAtA[i] = 0x9a
		i++
		dAtA[i] = 0x4
		i++
		i = encodeVarintRepository(dAtA, i, uint64(m.Permissions.Size()))
		n2, err := m.Permissions.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n2
	}
	if m.SubscribersCount != 0 {
		dAtA[i] = 0xa0
		i++
		dAtA[i] = 0x4
		i++
		i = encodeVarintRepository(dAtA, i, uint64(m.SubscribersCount))
	}
	if m.Organization != nil {
		dAtA[i] = 0xaa
		i++
		dAtA[i] = 0x4
		i++
		i = encodeVarintRepository(dAtA, i, uint64(m.Organization.Size()))
		n3, err := m.Organization.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n3
	}
	if m.Parent != nil {
		dAtA[i] = 0xb2
		i++
		dAtA[i] = 0x4
		i++
		i = encodeVarintRepository(dAtA, i, uint64(m.Parent.Size()))
		n4, err := m.Parent.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n4
	}
	if m.Source != nil {
		dAtA[i] = 0xba
		i++
		dAtA[i] = 0x4
		i++
		i = encodeVarintRepository(dAtA, i, uint64(m.Source.Size()))
		n5, err := m.Source.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n5
	}
	if m.AllowRebaseMerge {
		dAtA[i] = 0xc0
		i++
		dAtA[i] = 0x4
		i++
		if m.AllowRebaseMerge {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.AllowSquashMerge {
		dAtA[i] = 0xc8
		i++
		dAtA[i] = 0x4
		i++
		if m.AllowSquashMerge {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.AllowMergeCommit {
		dAtA[i] = 0xd0
		i++
		dAtA[i] = 0x4
		i++
		if m.AllowMergeCommit {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.Archived {
		dAtA[i] = 0xd8
		i++
		dAtA[i] = 0x4
		i++
		if m.Archived {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.HasProjects {
		dAtA[i] = 0xe0
		i++
		dAtA[i] = 0x4
		i++
		if m.HasProjects {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if len(m.License) > 0 {
		dAtA[i] = 0xea
		i++
		dAtA[i] = 0x4
		i++
		i = encodeVarintRepository(dAtA, i, uint64(len(m.License)))
		i += copy(dAtA[i:], m.License)
	}
	return i, nil
}

func encodeFixed64Repository(dAtA []byte, offset int, v uint64) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	dAtA[offset+4] = uint8(v >> 32)
	dAtA[offset+5] = uint8(v >> 40)
	dAtA[offset+6] = uint8(v >> 48)
	dAtA[offset+7] = uint8(v >> 56)
	return offset + 8
}
func encodeFixed32Repository(dAtA []byte, offset int, v uint32) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	return offset + 4
}
func encodeVarintRepository(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *Repository) Size() (n int) {
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovRepository(uint64(m.Id))
	}
	if m.Owner != nil {
		l = m.Owner.Size()
		n += 1 + l + sovRepository(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovRepository(uint64(l))
	}
	l = len(m.FullName)
	if l > 0 {
		n += 1 + l + sovRepository(uint64(l))
	}
	l = len(m.Description)
	if l > 0 {
		n += 1 + l + sovRepository(uint64(l))
	}
	if m.Private {
		n += 2
	}
	if m.Fork {
		n += 2
	}
	l = len(m.Url)
	if l > 0 {
		n += 1 + l + sovRepository(uint64(l))
	}
	l = len(m.HtmlUrl)
	if l > 0 {
		n += 1 + l + sovRepository(uint64(l))
	}
	l = len(m.ArchiveUrl)
	if l > 0 {
		n += 1 + l + sovRepository(uint64(l))
	}
	l = len(m.AssigneesUrl)
	if l > 0 {
		n += 1 + l + sovRepository(uint64(l))
	}
	l = len(m.BlobsUrl)
	if l > 0 {
		n += 1 + l + sovRepository(uint64(l))
	}
	l = len(m.BranchesUrl)
	if l > 0 {
		n += 1 + l + sovRepository(uint64(l))
	}
	l = len(m.CloneUrl)
	if l > 0 {
		n += 1 + l + sovRepository(uint64(l))
	}
	l = len(m.CollaboratorsUrl)
	if l > 0 {
		n += 1 + l + sovRepository(uint64(l))
	}
	l = len(m.CommentsUrl)
	if l > 0 {
		n += 2 + l + sovRepository(uint64(l))
	}
	l = len(m.CommitsUrl)
	if l > 0 {
		n += 2 + l + sovRepository(uint64(l))
	}
	l = len(m.CompareUrl)
	if l > 0 {
		n += 2 + l + sovRepository(uint64(l))
	}
	l = len(m.ContentsUrl)
	if l > 0 {
		n += 2 + l + sovRepository(uint64(l))
	}
	l = len(m.ContributorsUrl)
	if l > 0 {
		n += 2 + l + sovRepository(uint64(l))
	}
	l = len(m.DeploymentsUrl)
	if l > 0 {
		n += 2 + l + sovRepository(uint64(l))
	}
	l = len(m.DownloadsUrl)
	if l > 0 {
		n += 2 + l + sovRepository(uint64(l))
	}
	l = len(m.EventsUrl)
	if l > 0 {
		n += 2 + l + sovRepository(uint64(l))
	}
	l = len(m.ForksUrl)
	if l > 0 {
		n += 2 + l + sovRepository(uint64(l))
	}
	l = len(m.GitCommitsUrl)
	if l > 0 {
		n += 2 + l + sovRepository(uint64(l))
	}
	l = len(m.GitRefsUrl)
	if l > 0 {
		n += 2 + l + sovRepository(uint64(l))
	}
	l = len(m.GitTagsUrl)
	if l > 0 {
		n += 2 + l + sovRepository(uint64(l))
	}
	l = len(m.GitUrl)
	if l > 0 {
		n += 2 + l + sovRepository(uint64(l))
	}
	l = len(m.HooksUrl)
	if l > 0 {
		n += 2 + l + sovRepository(uint64(l))
	}
	l = len(m.IssueCommentUrl)
	if l > 0 {
		n += 2 + l + sovRepository(uint64(l))
	}
	l = len(m.IssueEventsUrl)
	if l > 0 {
		n += 2 + l + sovRepository(uint64(l))
	}
	l = len(m.IssuesUrl)
	if l > 0 {
		n += 2 + l + sovRepository(uint64(l))
	}
	l = len(m.KeysUrl)
	if l > 0 {
		n += 2 + l + sovRepository(uint64(l))
	}
	l = len(m.LabelsUrl)
	if l > 0 {
		n += 2 + l + sovRepository(uint64(l))
	}
	l = len(m.LanguagesUrl)
	if l > 0 {
		n += 2 + l + sovRepository(uint64(l))
	}
	l = len(m.MergesUrl)
	if l > 0 {
		n += 2 + l + sovRepository(uint64(l))
	}
	l = len(m.MilestonesUrl)
	if l > 0 {
		n += 2 + l + sovRepository(uint64(l))
	}
	l = len(m.MirrorUrl)
	if l > 0 {
		n += 2 + l + sovRepository(uint64(l))
	}
	l = len(m.NotificationsUrl)
	if l > 0 {
		n += 2 + l + sovRepository(uint64(l))
	}
	l = len(m.PullsUrl)
	if l > 0 {
		n += 2 + l + sovRepository(uint64(l))
	}
	l = len(m.ReleasesUrl)
	if l > 0 {
		n += 2 + l + sovRepository(uint64(l))
	}
	l = len(m.SshUrl)
	if l > 0 {
		n += 2 + l + sovRepository(uint64(l))
	}
	l = len(m.StargazersUrl)
	if l > 0 {
		n += 2 + l + sovRepository(uint64(l))
	}
	l = len(m.StatusesUrl)
	if l > 0 {
		n += 2 + l + sovRepository(uint64(l))
	}
	l = len(m.SubscribersUrl)
	if l > 0 {
		n += 2 + l + sovRepository(uint64(l))
	}
	l = len(m.SubscriptionUrl)
	if l > 0 {
		n += 2 + l + sovRepository(uint64(l))
	}
	l = len(m.SvnUrl)
	if l > 0 {
		n += 2 + l + sovRepository(uint64(l))
	}
	l = len(m.TagsUrl)
	if l > 0 {
		n += 2 + l + sovRepository(uint64(l))
	}
	l = len(m.TeamsUrl)
	if l > 0 {
		n += 2 + l + sovRepository(uint64(l))
	}
	l = len(m.TreesUrl)
	if l > 0 {
		n += 2 + l + sovRepository(uint64(l))
	}
	l = len(m.Homepage)
	if l > 0 {
		n += 2 + l + sovRepository(uint64(l))
	}
	l = len(m.Language)
	if l > 0 {
		n += 2 + l + sovRepository(uint64(l))
	}
	if m.ForksCount != 0 {
		n += 2 + sovRepository(uint64(m.ForksCount))
	}
	if m.StargazersCount != 0 {
		n += 2 + sovRepository(uint64(m.StargazersCount))
	}
	if m.WatchersCount != 0 {
		n += 2 + sovRepository(uint64(m.WatchersCount))
	}
	if m.NetworkCount != 0 {
		n += 2 + sovRepository(uint64(m.NetworkCount))
	}
	if m.RepoSize != 0 {
		n += 2 + sovRepository(uint64(m.RepoSize))
	}
	l = len(m.DefaultBranch)
	if l > 0 {
		n += 2 + l + sovRepository(uint64(l))
	}
	if m.OpenIssuesCount != 0 {
		n += 2 + sovRepository(uint64(m.OpenIssuesCount))
	}
	if m.HasIssues {
		n += 3
	}
	if m.HasWiki {
		n += 3
	}
	if m.HasPages {
		n += 3
	}
	if m.HasDownloads {
		n += 3
	}
	l = len(m.PushedAt)
	if l > 0 {
		n += 2 + l + sovRepository(uint64(l))
	}
	l = len(m.CreatedAt)
	if l > 0 {
		n += 2 + l + sovRepository(uint64(l))
	}
	l = len(m.UpdatedAt)
	if l > 0 {
		n += 2 + l + sovRepository(uint64(l))
	}
	if m.Permissions != nil {
		l = m.Permissions.Size()
		n += 2 + l + sovRepository(uint64(l))
	}
	if m.SubscribersCount != 0 {
		n += 2 + sovRepository(uint64(m.SubscribersCount))
	}
	if m.Organization != nil {
		l = m.Organization.Size()
		n += 2 + l + sovRepository(uint64(l))
	}
	if m.Parent != nil {
		l = m.Parent.Size()
		n += 2 + l + sovRepository(uint64(l))
	}
	if m.Source != nil {
		l = m.Source.Size()
		n += 2 + l + sovRepository(uint64(l))
	}
	if m.AllowRebaseMerge {
		n += 3
	}
	if m.AllowSquashMerge {
		n += 3
	}
	if m.AllowMergeCommit {
		n += 3
	}
	if m.Archived {
		n += 3
	}
	if m.HasProjects {
		n += 3
	}
	l = len(m.License)
	if l > 0 {
		n += 2 + l + sovRepository(uint64(l))
	}
	return n
}

func sovRepository(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozRepository(x uint64) (n int) {
	return sovRepository(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Repository) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRepository
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Repository: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Repository: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRepository
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Owner", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRepository
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRepository
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Owner == nil {
				m.Owner = &User{}
			}
			if err := m.Owner.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRepository
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRepository
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FullName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRepository
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRepository
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FullName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRepository
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRepository
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Private", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRepository
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Private = bool(v != 0)
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Fork", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRepository
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Fork = bool(v != 0)
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Url", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRepository
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRepository
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Url = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HtmlUrl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRepository
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRepository
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.HtmlUrl = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ArchiveUrl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRepository
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRepository
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ArchiveUrl = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AssigneesUrl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRepository
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRepository
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AssigneesUrl = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlobsUrl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRepository
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRepository
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BlobsUrl = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BranchesUrl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRepository
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRepository
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BranchesUrl = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CloneUrl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRepository
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRepository
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CloneUrl = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CollaboratorsUrl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRepository
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRepository
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CollaboratorsUrl = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 16:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CommentsUrl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRepository
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRepository
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CommentsUrl = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 17:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CommitsUrl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRepository
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRepository
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CommitsUrl = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 18:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CompareUrl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRepository
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRepository
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CompareUrl = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 19:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContentsUrl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRepository
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRepository
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ContentsUrl = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 20:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContributorsUrl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRepository
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRepository
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ContributorsUrl = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 21:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeploymentsUrl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRepository
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRepository
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DeploymentsUrl = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 22:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DownloadsUrl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRepository
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRepository
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DownloadsUrl = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 23:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EventsUrl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRepository
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRepository
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EventsUrl = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 24:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ForksUrl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRepository
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRepository
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ForksUrl = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 25:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GitCommitsUrl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRepository
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRepository
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GitCommitsUrl = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 26:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GitRefsUrl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRepository
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRepository
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GitRefsUrl = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 27:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GitTagsUrl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRepository
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRepository
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GitTagsUrl = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 28:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GitUrl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRepository
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRepository
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GitUrl = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 29:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HooksUrl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRepository
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRepository
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.HooksUrl = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 30:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IssueCommentUrl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRepository
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRepository
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.IssueCommentUrl = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 31:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IssueEventsUrl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRepository
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRepository
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.IssueEventsUrl = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 32:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IssuesUrl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRepository
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRepository
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.IssuesUrl = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 33:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field KeysUrl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRepository
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRepository
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.KeysUrl = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 34:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LabelsUrl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRepository
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRepository
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LabelsUrl = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 35:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LanguagesUrl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRepository
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRepository
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LanguagesUrl = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 36:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MergesUrl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRepository
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRepository
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MergesUrl = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 37:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MilestonesUrl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRepository
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRepository
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MilestonesUrl = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 38:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MirrorUrl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRepository
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRepository
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MirrorUrl = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 39:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NotificationsUrl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRepository
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRepository
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NotificationsUrl = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 40:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PullsUrl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRepository
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRepository
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PullsUrl = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 41:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReleasesUrl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRepository
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRepository
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ReleasesUrl = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 42:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SshUrl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRepository
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRepository
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SshUrl = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 43:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StargazersUrl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRepository
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRepository
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StargazersUrl = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 44:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StatusesUrl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRepository
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRepository
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StatusesUrl = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 45:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SubscribersUrl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRepository
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRepository
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SubscribersUrl = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 46:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SubscriptionUrl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRepository
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRepository
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SubscriptionUrl = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 47:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SvnUrl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRepository
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRepository
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SvnUrl = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 48:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TagsUrl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRepository
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRepository
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TagsUrl = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 49:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TeamsUrl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRepository
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRepository
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TeamsUrl = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 50:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TreesUrl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRepository
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRepository
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TreesUrl = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 51:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Homepage", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRepository
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRepository
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Homepage = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 52:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Language", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRepository
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRepository
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Language = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 53:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ForksCount", wireType)
			}
			m.ForksCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRepository
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ForksCount |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 54:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StargazersCount", wireType)
			}
			m.StargazersCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRepository
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StargazersCount |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 55:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field WatchersCount", wireType)
			}
			m.WatchersCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRepository
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.WatchersCount |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 56:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NetworkCount", wireType)
			}
			m.NetworkCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRepository
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NetworkCount |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 57:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RepoSize", wireType)
			}
			m.RepoSize = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRepository
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RepoSize |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 58:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DefaultBranch", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRepository
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRepository
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DefaultBranch = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 59:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OpenIssuesCount", wireType)
			}
			m.OpenIssuesCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRepository
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OpenIssuesCount |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 60:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HasIssues", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRepository
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.HasIssues = bool(v != 0)
		case 61:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HasWiki", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRepository
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.HasWiki = bool(v != 0)
		case 62:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HasPages", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRepository
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.HasPages = bool(v != 0)
		case 63:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HasDownloads", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRepository
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.HasDownloads = bool(v != 0)
		case 64:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PushedAt", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRepository
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRepository
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PushedAt = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 65:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatedAt", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRepository
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRepository
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CreatedAt = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 66:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdatedAt", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRepository
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRepository
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UpdatedAt = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 67:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Permissions", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRepository
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRepository
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Permissions == nil {
				m.Permissions = &RepositoryPermission{}
			}
			if err := m.Permissions.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 68:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SubscribersCount", wireType)
			}
			m.SubscribersCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRepository
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SubscribersCount |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 69:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Organization", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRepository
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRepository
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Organization == nil {
				m.Organization = &User{}
			}
			if err := m.Organization.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 70:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Parent", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRepository
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRepository
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Parent == nil {
				m.Parent = &Repository{}
			}
			if err := m.Parent.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 71:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Source", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRepository
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRepository
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Source == nil {
				m.Source = &Repository{}
			}
			if err := m.Source.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 72:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AllowRebaseMerge", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRepository
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.AllowRebaseMerge = bool(v != 0)
		case 73:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AllowSquashMerge", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRepository
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.AllowSquashMerge = bool(v != 0)
		case 74:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AllowMergeCommit", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRepository
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.AllowMergeCommit = bool(v != 0)
		case 75:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Archived", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRepository
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Archived = bool(v != 0)
		case 76:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HasProjects", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRepository
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.HasProjects = bool(v != 0)
		case 77:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field License", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRepository
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRepository
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.License = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRepository(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRepository
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipRepository(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowRepository
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowRepository
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowRepository
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthRepository
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowRepository
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipRepository(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthRepository = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowRepository   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("repository.proto", fileDescriptorRepository) }

var fileDescriptorRepository = []byte{
	// 1231 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x74, 0x96, 0xe9, 0x76, 0x13, 0x37,
	0x14, 0xc7, 0x31, 0x4b, 0x12, 0x2b, 0x4e, 0x62, 0xa6, 0xb4, 0x88, 0x84, 0x04, 0x03, 0x05, 0xc2,
	0x16, 0x28, 0x74, 0x5f, 0x68, 0x49, 0xa0, 0x2d, 0x6d, 0xe9, 0xe1, 0x98, 0x72, 0xfa, 0xd1, 0x47,
	0x33, 0x96, 0x67, 0xd4, 0x8c, 0x47, 0xae, 0xa4, 0x89, 0x0f, 0x79, 0x92, 0x3e, 0x12, 0x1f, 0xfb,
	0x04, 0x9c, 0x36, 0x7d, 0x91, 0x9e, 0xbb, 0xcc, 0x42, 0x97, 0x4f, 0xb6, 0xfe, 0xff, 0xdf, 0x68,
	0xb9, 0xba, 0x57, 0x92, 0xe8, 0x3b, 0x3d, 0xb3, 0xde, 0x04, 0xeb, 0x5e, 0xee, 0xcc, 0x9c, 0x0d,
	0x36, 0x5a, 0x48, 0x4d, 0xc8, 0xca, 0x78, 0xfd, 0x36, 0xfd, 0xee, 0x24, 0x76, 0x7a, 0x27, 0xb5,
	0xa9, 0xbd, 0x83, 0x76, 0x5c, 0x4e, 0xb0, 0x85, 0x0d, 0xfc, 0x47, 0x9f, 0xad, 0x8b, 0xd2, 0x6b,
	0xc7, 0xff, 0x37, 0x9a, 0x4e, 0x47, 0x33, 0xed, 0xa6, 0xc6, 0x7b, 0x63, 0x0b, 0x32, 0x2f, 0xbd,
	0x3e, 0x23, 0xc4, 0xb0, 0xf6, 0xa3, 0x55, 0x71, 0xdc, 0x8c, 0x65, 0x67, 0xd0, 0xd9, 0x3e, 0x35,
	0x3c, 0x6e, 0xc6, 0xd1, 0x25, 0x71, 0xca, 0xce, 0x0b, 0xed, 0xe4, 0xf1, 0x41, 0x67, 0x7b, 0xf9,
	0x5e, 0x6f, 0x87, 0xa7, 0xf1, 0xc2, 0x6b, 0x37, 0x24, 0x2b, 0x8a, 0xc4, 0xc9, 0x42, 0x4d, 0xb5,
	0x3c, 0x31, 0xe8, 0x6c, 0x77, 0x87, 0xf8, 0x3f, 0xda, 0x10, 0xdd, 0x49, 0x99, 0xe7, 0x23, 0x34,
	0x4e, 0xa2, 0xb1, 0x04, 0xc2, 0x8f, 0x60, 0x0e, 0xc4, 0xf2, 0x58, 0xfb, 0xc4, 0x99, 0x59, 0x30,
	0xb6, 0x90, 0xa7, 0xd0, 0x6e, 0x4b, 0x91, 0x14, 0x8b, 0x33, 0x67, 0x0e, 0x54, 0xd0, 0x72, 0x61,
	0xd0, 0xd9, 0x5e, 0x1a, 0x56, 0x4d, 0x18, 0x6c, 0x62, 0xdd, 0xbe, 0x5c, 0x44, 0x19, 0xff, 0x47,
	0x7d, 0x71, 0xa2, 0x74, 0xb9, 0x5c, 0xc2, 0x7e, 0xe0, 0x6f, 0x74, 0x4e, 0x2c, 0x65, 0x61, 0x9a,
	0x8f, 0x40, 0xee, 0xa2, 0xbc, 0x08, 0xed, 0x17, 0x2e, 0x8f, 0x2e, 0x88, 0x65, 0xe5, 0x92, 0xcc,
	0x1c, 0x68, 0x74, 0x05, 0xba, 0x82, 0x25, 0x00, 0x2e, 0x8b, 0x15, 0xe5, 0xbd, 0x49, 0x0b, 0xad,
	0x3d, 0x22, 0xcb, 0x88, 0xf4, 0x6a, 0x11, 0xa0, 0x0d, 0xd1, 0x8d, 0x73, 0x1b, 0x13, 0xd0, 0xa3,
	0xf5, 0xa1, 0x00, 0xe6, 0x45, 0xd1, 0x8b, 0x9d, 0x2a, 0x92, 0x8c, 0x3b, 0x58, 0xa1, 0x05, 0x56,
	0x1a, 0x7f, 0x9f, 0xe4, 0xb6, 0xa0, 0x39, 0xac, 0xd2, 0xf7, 0x28, 0x80, 0x79, 0x53, 0x9c, 0x4e,
	0x6c, 0x9e, 0xab, 0xd8, 0x3a, 0x15, 0xac, 0xa3, 0x4e, 0xd6, 0x10, 0xea, 0xbf, 0x61, 0xf0, 0x60,
	0x89, 0x9d, 0x4e, 0x75, 0x11, 0x88, 0xeb, 0xd3, 0x60, 0x95, 0xc6, 0x4b, 0x86, 0xa6, 0x61, 0xe2,
	0x34, 0x2d, 0x99, 0xa5, 0x06, 0x98, 0x29, 0x47, 0xf3, 0x89, 0x6a, 0x00, 0xa4, 0x7a, 0x90, 0x22,
	0xd4, 0x83, 0xbc, 0x55, 0x0d, 0x42, 0x1a, 0x20, 0xd7, 0x45, 0x1f, 0x9a, 0xce, 0xc4, 0x65, 0x3d,
	0xe7, 0x33, 0x88, 0xad, 0xb5, 0x75, 0x40, 0xaf, 0x89, 0xb5, 0xb1, 0x9e, 0xe5, 0xf6, 0x65, 0x33,
	0xeb, 0xb7, 0x91, 0x5c, 0x6d, 0xc9, 0xbc, 0x15, 0x63, 0x3b, 0x2f, 0x72, 0xab, 0xc6, 0x84, 0xbd,
	0x43, 0x5b, 0x51, 0x8b, 0x00, 0x6d, 0x0a, 0xa1, 0x0f, 0xea, 0x8e, 0xce, 0x22, 0xd1, 0x25, 0x85,
	0x23, 0x0d, 0x49, 0x42, 0xae, 0xe4, 0x4c, 0x04, 0x01, 0xcc, 0xab, 0x62, 0x2d, 0x35, 0x61, 0xd4,
	0x8e, 0xce, 0x39, 0x44, 0x56, 0x52, 0x13, 0xf6, 0x9a, 0x00, 0x0d, 0x44, 0x0f, 0x38, 0xa7, 0x27,
	0x04, 0xad, 0x53, 0x84, 0x52, 0x13, 0x86, 0x7a, 0xd2, 0x26, 0x82, 0x4a, 0x89, 0xd8, 0xa8, 0x89,
	0x9f, 0x54, 0x8a, 0xc4, 0x59, 0xb1, 0x08, 0x04, 0x98, 0xe7, 0xd1, 0x84, 0xd2, 0xe6, 0x19, 0x66,
	0xd6, 0xf2, 0x0c, 0x37, 0x69, 0x86, 0x28, 0x80, 0x79, 0x43, 0x9c, 0x36, 0xde, 0x97, 0x7a, 0xc4,
	0x1b, 0x8a, 0xd0, 0x16, 0xc5, 0x15, 0x8d, 0x3d, 0xd2, 0x81, 0xdd, 0x16, 0x7d, 0x62, 0x5b, 0xf1,
	0xb8, 0x40, 0x81, 0x45, 0xfd, 0x71, 0x1d, 0x94, 0x4d, 0x21, 0x50, 0x21, 0x66, 0x40, 0x31, 0x23,
	0xe5, 0x05, 0x95, 0xcf, 0xbe, 0x7e, 0x49, 0xe6, 0x45, 0x2a, 0x1f, 0x68, 0xf3, 0x97, 0xb9, 0x8a,
	0x75, 0x4e, 0xe6, 0x25, 0xfa, 0x92, 0x14, 0xde, 0xb1, 0x5c, 0x15, 0x69, 0xa9, 0x52, 0xee, 0xfb,
	0x32, 0xed, 0x58, 0x2d, 0x72, 0x1f, 0x53, 0xed, 0x2a, 0xe2, 0x5d, 0xea, 0x83, 0x14, 0xb0, 0xaf,
	0x88, 0xd5, 0xa9, 0xc9, 0xb5, 0x0f, 0xb6, 0x60, 0xe4, 0x0a, 0xed, 0x49, 0xa3, 0x56, 0xbd, 0x18,
	0xe7, 0xac, 0x43, 0xe4, 0x2a, 0xf7, 0x82, 0x0a, 0x17, 0x51, 0x61, 0x83, 0x99, 0x98, 0x44, 0xc1,
	0x91, 0x42, 0x1d, 0x5d, 0xa3, 0x22, 0x7a, 0xc3, 0xe0, 0x2d, 0x98, 0x95, 0x39, 0x2f, 0x6a, 0x9b,
	0xb6, 0x00, 0x05, 0x4e, 0x7e, 0xa7, 0x73, 0xad, 0x3c, 0xcf, 0xe6, 0x3a, 0x25, 0x7f, 0xa5, 0xf1,
	0xde, 0x7a, 0x9f, 0xa1, 0x7b, 0x83, 0xf6, 0xd6, 0xfb, 0x8c, 0xd7, 0xe2, 0x83, 0x72, 0xa9, 0x3a,
	0xd4, 0x5c, 0x13, 0x37, 0x69, 0x2d, 0x8d, 0xca, 0x43, 0xf8, 0xa0, 0x42, 0x59, 0x0d, 0x71, 0x8b,
	0x86, 0xa8, 0x34, 0x2e, 0x1a, 0x5f, 0xc6, 0x70, 0x44, 0xc6, 0x55, 0x57, 0xb7, 0x69, 0x6f, 0x5b,
	0x32, 0x17, 0x22, 0x2b, 0x78, 0x96, 0x22, 0xb9, 0x43, 0x09, 0xd3, 0xd6, 0xab, 0x69, 0x1f, 0x10,
	0x71, 0x87, 0xa7, 0x7d, 0x50, 0x70, 0x02, 0xd4, 0x99, 0x7c, 0x97, 0x12, 0x20, 0x70, 0x1a, 0x6f,
	0x88, 0x6e, 0xd0, 0x6a, 0x4a, 0xde, 0x7b, 0x14, 0x2a, 0x14, 0x2a, 0xd3, 0x55, 0xe7, 0xe6, 0x3d,
	0x36, 0x1d, 0x9f, 0x99, 0xeb, 0x62, 0x29, 0xb3, 0x53, 0x3d, 0x53, 0xa9, 0x96, 0xf7, 0xab, 0x34,
	0xa7, 0x36, 0x78, 0x55, 0x8a, 0xc8, 0xf7, 0xc9, 0xab, 0xda, 0x70, 0x3a, 0x51, 0x05, 0x27, 0xb6,
	0x2c, 0x82, 0xfc, 0x00, 0x2f, 0x27, 0x81, 0xd2, 0x1e, 0x28, 0xb8, 0xe2, 0x26, 0xc8, 0x44, 0x7d,
	0x88, 0xd4, 0x5a, 0xa3, 0x13, 0x7a, 0x45, 0xac, 0xce, 0x55, 0x48, 0xb2, 0x06, 0xfc, 0x08, 0xc1,
	0x95, 0x4a, 0x25, 0xec, 0xb2, 0x58, 0x29, 0x74, 0x98, 0x5b, 0xb7, 0xcf, 0xd4, 0xc7, 0x48, 0xf5,
	0x58, 0x24, 0x68, 0x20, 0x4e, 0x7a, 0x73, 0xa8, 0xe5, 0x27, 0xe0, 0xed, 0xf6, 0x8e, 0x5e, 0x5f,
	0x58, 0x82, 0x9b, 0xf4, 0xb9, 0x39, 0xd4, 0x43, 0x74, 0x60, 0xb4, 0xb1, 0x9e, 0xa8, 0x32, 0x0f,
	0x23, 0x3a, 0xfc, 0xe5, 0xa7, 0xb4, 0xfb, 0xac, 0xee, 0xa2, 0x08, 0x35, 0x6e, 0x67, 0xba, 0x18,
	0x71, 0x49, 0xd2, 0x88, 0x9f, 0xd1, 0x02, 0xc0, 0x78, 0x82, 0x3a, 0x0d, 0xba, 0x29, 0x44, 0xa6,
	0x3c, 0xa3, 0xf2, 0x73, 0xbc, 0x05, 0xbb, 0x99, 0xf2, 0xc4, 0xe0, 0xc5, 0xa7, 0xfc, 0x68, 0x6e,
	0xf6, 0x8d, 0xfc, 0x82, 0x6e, 0xce, 0x4c, 0xf9, 0x9f, 0xcd, 0xbe, 0xc1, 0x63, 0x46, 0xf9, 0x11,
	0x84, 0xdb, 0xcb, 0x07, 0xe8, 0x01, 0xfb, 0x0c, 0xda, 0xb0, 0x60, 0x30, 0xeb, 0x83, 0x55, 0x7e,
	0x89, 0x40, 0x2f, 0x53, 0xfe, 0x51, 0xa5, 0x51, 0x95, 0xf8, 0x4c, 0x8f, 0x47, 0x2a, 0xc8, 0xaf,
	0xaa, 0x2a, 0x01, 0xe1, 0x21, 0x4e, 0x2c, 0x71, 0x5a, 0x05, 0x72, 0x1f, 0x52, 0x39, 0xb2, 0x42,
	0x76, 0x39, 0x1b, 0x57, 0xf6, 0x2e, 0xd9, 0xac, 0x3c, 0x0c, 0xd1, 0x03, 0xb1, 0xdc, 0x3c, 0x4d,
	0xbc, 0xdc, 0xc3, 0xd7, 0xc6, 0xf9, 0xea, 0xb5, 0xd1, 0x3c, 0x50, 0x9e, 0xd5, 0xd0, 0xb0, 0xfd,
	0x01, 0x54, 0x7b, 0xbb, 0x3a, 0x28, 0x84, 0x8f, 0x30, 0x84, 0xfd, 0x96, 0x41, 0x31, 0xbc, 0x2b,
	0x7a, 0xd6, 0xa5, 0xaa, 0x30, 0x87, 0x78, 0x02, 0xc8, 0xc7, 0xff, 0xf1, 0xb6, 0x79, 0x83, 0x88,
	0x6e, 0x88, 0x05, 0xb8, 0x0a, 0x8b, 0x20, 0xbf, 0x46, 0x36, 0xfa, 0xf7, 0xcc, 0x86, 0x4c, 0x00,
	0xeb, 0x6d, 0xe9, 0x12, 0x2d, 0xbf, 0xf9, 0x7f, 0x96, 0x88, 0xe8, 0x96, 0x88, 0x54, 0x9e, 0xdb,
	0xf9, 0xc8, 0xe9, 0x58, 0x79, 0x3d, 0xc2, 0x43, 0x50, 0x7e, 0x8b, 0xb1, 0xef, 0xa3, 0x33, 0x44,
	0xe3, 0x29, 0xe8, 0x0d, 0xed, 0x7f, 0x2d, 0x95, 0xcf, 0x98, 0x7e, 0xd2, 0xa2, 0x9f, 0xa3, 0xf1,
	0x0f, 0x1a, 0x31, 0xbe, 0xe3, 0xe4, 0x77, 0x2d, 0x1a, 0x39, 0xba, 0xe5, 0xa0, 0x00, 0xf9, 0x0d,
	0x34, 0x96, 0xdf, 0x53, 0x72, 0x54, 0x6d, 0x38, 0x9d, 0x30, 0x73, 0x9c, 0xfd, 0x45, 0x27, 0xc1,
	0xcb, 0x1f, 0xd0, 0x5f, 0x86, 0xe4, 0x61, 0x09, 0x1e, 0x6c, 0xb9, 0x49, 0x74, 0xe1, 0xb5, 0x7c,
	0x4a, 0xe7, 0x05, 0x37, 0x77, 0xcf, 0xbc, 0xfa, 0x73, 0xeb, 0xd8, 0xab, 0xa3, 0xad, 0xce, 0xef,
	0x47, 0x5b, 0x9d, 0x3f, 0x8e, 0xb6, 0x3a, 0xbf, 0xfd, 0xb5, 0x75, 0x2c, 0x5e, 0xc0, 0xd7, 0xe7,
	0xfd, 0xbf, 0x03, 0x00, 0x00, 0xff, 0xff, 0x26, 0x2d, 0xb2, 0xe5, 0xf1, 0x0a, 0x00, 0x00,
}
