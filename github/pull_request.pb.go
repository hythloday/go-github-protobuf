// Code generated by protoc-gen-gogo.
// source: pull_request.proto
// DO NOT EDIT!

package github

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/protobuf/gogoproto"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type RepositoryRef struct {
	Label string      `protobuf:"bytes,1,opt,name=label,proto3" json:"label,omitempty"`
	Ref   string      `protobuf:"bytes,2,opt,name=ref,proto3" json:"ref,omitempty"`
	Sha   string      `protobuf:"bytes,3,opt,name=sha,proto3" json:"sha,omitempty"`
	User  *User       `protobuf:"bytes,4,opt,name=user" json:"user,omitempty"`
	Repo  *Repository `protobuf:"bytes,5,opt,name=repo" json:"repo,omitempty"`
}

func (m *RepositoryRef) Reset()                    { *m = RepositoryRef{} }
func (m *RepositoryRef) String() string            { return proto.CompactTextString(m) }
func (*RepositoryRef) ProtoMessage()               {}
func (*RepositoryRef) Descriptor() ([]byte, []int) { return fileDescriptorPullRequest, []int{0} }

type LinkHref struct {
	Href string `protobuf:"bytes,1,opt,name=href,proto3" json:"href,omitempty"`
}

func (m *LinkHref) Reset()                    { *m = LinkHref{} }
func (m *LinkHref) String() string            { return proto.CompactTextString(m) }
func (*LinkHref) ProtoMessage()               {}
func (*LinkHref) Descriptor() ([]byte, []int) { return fileDescriptorPullRequest, []int{1} }

type Links struct {
	Self           *LinkHref `protobuf:"bytes,1,opt,name=self" json:"self,omitempty"`
	Html           *LinkHref `protobuf:"bytes,2,opt,name=html" json:"html,omitempty"`
	Issue          *LinkHref `protobuf:"bytes,3,opt,name=issue" json:"issue,omitempty"`
	Comments       *LinkHref `protobuf:"bytes,4,opt,name=comments" json:"comments,omitempty"`
	ReviewComments *LinkHref `protobuf:"bytes,5,opt,name=review_comments,json=reviewComments" json:"review_comments,omitempty"`
	ReviewComment  *LinkHref `protobuf:"bytes,6,opt,name=review_comment,json=reviewComment" json:"review_comment,omitempty"`
	Commits        *LinkHref `protobuf:"bytes,7,opt,name=commits" json:"commits,omitempty"`
	Statuses       *LinkHref `protobuf:"bytes,8,opt,name=statuses" json:"statuses,omitempty"`
}

func (m *Links) Reset()                    { *m = Links{} }
func (m *Links) String() string            { return proto.CompactTextString(m) }
func (*Links) ProtoMessage()               {}
func (*Links) Descriptor() ([]byte, []int) { return fileDescriptorPullRequest, []int{2} }

type PullRequest struct {
	Id                int32          `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Url               string         `protobuf:"bytes,2,opt,name=url,proto3" json:"url,omitempty"`
	HtmlUrl           string         `protobuf:"bytes,3,opt,name=html_url,json=htmlUrl,proto3" json:"html_url,omitempty"`
	DiffUrl           string         `protobuf:"bytes,4,opt,name=diff_url,json=diffUrl,proto3" json:"diff_url,omitempty"`
	PatchUrl          string         `protobuf:"bytes,5,opt,name=patch_url,json=patchUrl,proto3" json:"patch_url,omitempty"`
	IssueUrl          string         `protobuf:"bytes,6,opt,name=issue_url,json=issueUrl,proto3" json:"issue_url,omitempty"`
	CommitsUrl        string         `protobuf:"bytes,7,opt,name=commits_url,json=commitsUrl,proto3" json:"commits_url,omitempty"`
	ReviewCommentsUrl string         `protobuf:"bytes,8,opt,name=review_comments_url,json=reviewCommentsUrl,proto3" json:"review_comments_url,omitempty"`
	ReviewCommentUrl  string         `protobuf:"bytes,9,opt,name=review_comment_url,json=reviewCommentUrl,proto3" json:"review_comment_url,omitempty"`
	CommentsUrl       string         `protobuf:"bytes,10,opt,name=comments_url,json=commentsUrl,proto3" json:"comments_url,omitempty"`
	StatusesUrl       string         `protobuf:"bytes,11,opt,name=statuses_url,json=statusesUrl,proto3" json:"statuses_url,omitempty"`
	Number            int32          `protobuf:"varint,12,opt,name=number,proto3" json:"number,omitempty"`
	State             string         `protobuf:"bytes,13,opt,name=state,proto3" json:"state,omitempty"`
	Title             string         `protobuf:"bytes,14,opt,name=title,proto3" json:"title,omitempty"`
	Body              string         `protobuf:"bytes,15,opt,name=body,proto3" json:"body,omitempty"`
	Assignee          *User          `protobuf:"bytes,16,opt,name=assignee" json:"assignee,omitempty"`
	Milestone         *Milestone     `protobuf:"bytes,17,opt,name=milestone" json:"milestone,omitempty"`
	Locked            bool           `protobuf:"varint,18,opt,name=locked,proto3" json:"locked,omitempty"`
	CreatedAt         string         `protobuf:"bytes,19,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	UpdatedAt         string         `protobuf:"bytes,20,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
	ClosedAt          string         `protobuf:"bytes,21,opt,name=closed_at,json=closedAt,proto3" json:"closed_at,omitempty"`
	MergedAt          string         `protobuf:"bytes,22,opt,name=merged_at,json=mergedAt,proto3" json:"merged_at,omitempty"`
	Head              *RepositoryRef `protobuf:"bytes,23,opt,name=head" json:"head,omitempty"`
	Base              *RepositoryRef `protobuf:"bytes,24,opt,name=base" json:"base,omitempty"`
	User              *User          `protobuf:"bytes,25,opt,name=user" json:"user,omitempty"`
	MergeCommitSha    string         `protobuf:"bytes,26,opt,name=merge_commit_sha,json=mergeCommitSha,proto3" json:"merge_commit_sha,omitempty"`
	Merged            bool           `protobuf:"varint,27,opt,name=merged,proto3" json:"merged,omitempty"`
	Mergeable         bool           `protobuf:"varint,28,opt,name=mergeable,proto3" json:"mergeable,omitempty"`
	XLinks            *Links         `protobuf:"bytes,29,opt,name=_links,json=Links" json:"_links,omitempty"`
	MergedBy          *User          `protobuf:"bytes,30,opt,name=merged_by,json=mergedBy" json:"merged_by,omitempty"`
	Comments          int32          `protobuf:"varint,31,opt,name=comments,proto3" json:"comments,omitempty"`
	Commits           int32          `protobuf:"varint,32,opt,name=commits,proto3" json:"commits,omitempty"`
	Additions         int32          `protobuf:"varint,33,opt,name=additions,proto3" json:"additions,omitempty"`
	Deletions         int32          `protobuf:"varint,34,opt,name=deletions,proto3" json:"deletions,omitempty"`
	ChangedFiles      int32          `protobuf:"varint,35,opt,name=changed_files,json=changedFiles,proto3" json:"changed_files,omitempty"`
	Reactions         *Reactions     `protobuf:"bytes,36,opt,name=reactions" json:"reactions,omitempty"`
}

func (m *PullRequest) Reset()                    { *m = PullRequest{} }
func (m *PullRequest) String() string            { return proto.CompactTextString(m) }
func (*PullRequest) ProtoMessage()               {}
func (*PullRequest) Descriptor() ([]byte, []int) { return fileDescriptorPullRequest, []int{3} }

func init() {
	proto.RegisterType((*RepositoryRef)(nil), "github.RepositoryRef")
	proto.RegisterType((*LinkHref)(nil), "github.LinkHref")
	proto.RegisterType((*Links)(nil), "github.Links")
	proto.RegisterType((*PullRequest)(nil), "github.PullRequest")
}
func (m *RepositoryRef) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RepositoryRef) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Label) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintPullRequest(dAtA, i, uint64(len(m.Label)))
		i += copy(dAtA[i:], m.Label)
	}
	if len(m.Ref) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintPullRequest(dAtA, i, uint64(len(m.Ref)))
		i += copy(dAtA[i:], m.Ref)
	}
	if len(m.Sha) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintPullRequest(dAtA, i, uint64(len(m.Sha)))
		i += copy(dAtA[i:], m.Sha)
	}
	if m.User != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintPullRequest(dAtA, i, uint64(m.User.Size()))
		n1, err := m.User.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	if m.Repo != nil {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintPullRequest(dAtA, i, uint64(m.Repo.Size()))
		n2, err := m.Repo.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n2
	}
	return i, nil
}

func (m *LinkHref) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LinkHref) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Href) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintPullRequest(dAtA, i, uint64(len(m.Href)))
		i += copy(dAtA[i:], m.Href)
	}
	return i, nil
}

func (m *Links) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Links) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Self != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintPullRequest(dAtA, i, uint64(m.Self.Size()))
		n3, err := m.Self.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n3
	}
	if m.Html != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintPullRequest(dAtA, i, uint64(m.Html.Size()))
		n4, err := m.Html.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n4
	}
	if m.Issue != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintPullRequest(dAtA, i, uint64(m.Issue.Size()))
		n5, err := m.Issue.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n5
	}
	if m.Comments != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintPullRequest(dAtA, i, uint64(m.Comments.Size()))
		n6, err := m.Comments.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n6
	}
	if m.ReviewComments != nil {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintPullRequest(dAtA, i, uint64(m.ReviewComments.Size()))
		n7, err := m.ReviewComments.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n7
	}
	if m.ReviewComment != nil {
		dAtA[i] = 0x32
		i++
		i = encodeVarintPullRequest(dAtA, i, uint64(m.ReviewComment.Size()))
		n8, err := m.ReviewComment.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n8
	}
	if m.Commits != nil {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintPullRequest(dAtA, i, uint64(m.Commits.Size()))
		n9, err := m.Commits.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n9
	}
	if m.Statuses != nil {
		dAtA[i] = 0x42
		i++
		i = encodeVarintPullRequest(dAtA, i, uint64(m.Statuses.Size()))
		n10, err := m.Statuses.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n10
	}
	return i, nil
}

func (m *PullRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PullRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintPullRequest(dAtA, i, uint64(m.Id))
	}
	if len(m.Url) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintPullRequest(dAtA, i, uint64(len(m.Url)))
		i += copy(dAtA[i:], m.Url)
	}
	if len(m.HtmlUrl) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintPullRequest(dAtA, i, uint64(len(m.HtmlUrl)))
		i += copy(dAtA[i:], m.HtmlUrl)
	}
	if len(m.DiffUrl) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintPullRequest(dAtA, i, uint64(len(m.DiffUrl)))
		i += copy(dAtA[i:], m.DiffUrl)
	}
	if len(m.PatchUrl) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintPullRequest(dAtA, i, uint64(len(m.PatchUrl)))
		i += copy(dAtA[i:], m.PatchUrl)
	}
	if len(m.IssueUrl) > 0 {
		dAtA[i] = 0x32
		i++
		i = encodeVarintPullRequest(dAtA, i, uint64(len(m.IssueUrl)))
		i += copy(dAtA[i:], m.IssueUrl)
	}
	if len(m.CommitsUrl) > 0 {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintPullRequest(dAtA, i, uint64(len(m.CommitsUrl)))
		i += copy(dAtA[i:], m.CommitsUrl)
	}
	if len(m.ReviewCommentsUrl) > 0 {
		dAtA[i] = 0x42
		i++
		i = encodeVarintPullRequest(dAtA, i, uint64(len(m.ReviewCommentsUrl)))
		i += copy(dAtA[i:], m.ReviewCommentsUrl)
	}
	if len(m.ReviewCommentUrl) > 0 {
		dAtA[i] = 0x4a
		i++
		i = encodeVarintPullRequest(dAtA, i, uint64(len(m.ReviewCommentUrl)))
		i += copy(dAtA[i:], m.ReviewCommentUrl)
	}
	if len(m.CommentsUrl) > 0 {
		dAtA[i] = 0x52
		i++
		i = encodeVarintPullRequest(dAtA, i, uint64(len(m.CommentsUrl)))
		i += copy(dAtA[i:], m.CommentsUrl)
	}
	if len(m.StatusesUrl) > 0 {
		dAtA[i] = 0x5a
		i++
		i = encodeVarintPullRequest(dAtA, i, uint64(len(m.StatusesUrl)))
		i += copy(dAtA[i:], m.StatusesUrl)
	}
	if m.Number != 0 {
		dAtA[i] = 0x60
		i++
		i = encodeVarintPullRequest(dAtA, i, uint64(m.Number))
	}
	if len(m.State) > 0 {
		dAtA[i] = 0x6a
		i++
		i = encodeVarintPullRequest(dAtA, i, uint64(len(m.State)))
		i += copy(dAtA[i:], m.State)
	}
	if len(m.Title) > 0 {
		dAtA[i] = 0x72
		i++
		i = encodeVarintPullRequest(dAtA, i, uint64(len(m.Title)))
		i += copy(dAtA[i:], m.Title)
	}
	if len(m.Body) > 0 {
		dAtA[i] = 0x7a
		i++
		i = encodeVarintPullRequest(dAtA, i, uint64(len(m.Body)))
		i += copy(dAtA[i:], m.Body)
	}
	if m.Assignee != nil {
		dAtA[i] = 0x82
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintPullRequest(dAtA, i, uint64(m.Assignee.Size()))
		n11, err := m.Assignee.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n11
	}
	if m.Milestone != nil {
		dAtA[i] = 0x8a
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintPullRequest(dAtA, i, uint64(m.Milestone.Size()))
		n12, err := m.Milestone.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n12
	}
	if m.Locked {
		dAtA[i] = 0x90
		i++
		dAtA[i] = 0x1
		i++
		if m.Locked {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if len(m.CreatedAt) > 0 {
		dAtA[i] = 0x9a
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintPullRequest(dAtA, i, uint64(len(m.CreatedAt)))
		i += copy(dAtA[i:], m.CreatedAt)
	}
	if len(m.UpdatedAt) > 0 {
		dAtA[i] = 0xa2
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintPullRequest(dAtA, i, uint64(len(m.UpdatedAt)))
		i += copy(dAtA[i:], m.UpdatedAt)
	}
	if len(m.ClosedAt) > 0 {
		dAtA[i] = 0xaa
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintPullRequest(dAtA, i, uint64(len(m.ClosedAt)))
		i += copy(dAtA[i:], m.ClosedAt)
	}
	if len(m.MergedAt) > 0 {
		dAtA[i] = 0xb2
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintPullRequest(dAtA, i, uint64(len(m.MergedAt)))
		i += copy(dAtA[i:], m.MergedAt)
	}
	if m.Head != nil {
		dAtA[i] = 0xba
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintPullRequest(dAtA, i, uint64(m.Head.Size()))
		n13, err := m.Head.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n13
	}
	if m.Base != nil {
		dAtA[i] = 0xc2
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintPullRequest(dAtA, i, uint64(m.Base.Size()))
		n14, err := m.Base.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n14
	}
	if m.User != nil {
		dAtA[i] = 0xca
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintPullRequest(dAtA, i, uint64(m.User.Size()))
		n15, err := m.User.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n15
	}
	if len(m.MergeCommitSha) > 0 {
		dAtA[i] = 0xd2
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintPullRequest(dAtA, i, uint64(len(m.MergeCommitSha)))
		i += copy(dAtA[i:], m.MergeCommitSha)
	}
	if m.Merged {
		dAtA[i] = 0xd8
		i++
		dAtA[i] = 0x1
		i++
		if m.Merged {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.Mergeable {
		dAtA[i] = 0xe0
		i++
		dAtA[i] = 0x1
		i++
		if m.Mergeable {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.XLinks != nil {
		dAtA[i] = 0xea
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintPullRequest(dAtA, i, uint64(m.XLinks.Size()))
		n16, err := m.XLinks.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n16
	}
	if m.MergedBy != nil {
		dAtA[i] = 0xf2
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintPullRequest(dAtA, i, uint64(m.MergedBy.Size()))
		n17, err := m.MergedBy.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n17
	}
	if m.Comments != 0 {
		dAtA[i] = 0xf8
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintPullRequest(dAtA, i, uint64(m.Comments))
	}
	if m.Commits != 0 {
		dAtA[i] = 0x80
		i++
		dAtA[i] = 0x2
		i++
		i = encodeVarintPullRequest(dAtA, i, uint64(m.Commits))
	}
	if m.Additions != 0 {
		dAtA[i] = 0x88
		i++
		dAtA[i] = 0x2
		i++
		i = encodeVarintPullRequest(dAtA, i, uint64(m.Additions))
	}
	if m.Deletions != 0 {
		dAtA[i] = 0x90
		i++
		dAtA[i] = 0x2
		i++
		i = encodeVarintPullRequest(dAtA, i, uint64(m.Deletions))
	}
	if m.ChangedFiles != 0 {
		dAtA[i] = 0x98
		i++
		dAtA[i] = 0x2
		i++
		i = encodeVarintPullRequest(dAtA, i, uint64(m.ChangedFiles))
	}
	if m.Reactions != nil {
		dAtA[i] = 0xa2
		i++
		dAtA[i] = 0x2
		i++
		i = encodeVarintPullRequest(dAtA, i, uint64(m.Reactions.Size()))
		n18, err := m.Reactions.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n18
	}
	return i, nil
}

func encodeFixed64PullRequest(dAtA []byte, offset int, v uint64) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	dAtA[offset+4] = uint8(v >> 32)
	dAtA[offset+5] = uint8(v >> 40)
	dAtA[offset+6] = uint8(v >> 48)
	dAtA[offset+7] = uint8(v >> 56)
	return offset + 8
}
func encodeFixed32PullRequest(dAtA []byte, offset int, v uint32) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	return offset + 4
}
func encodeVarintPullRequest(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *RepositoryRef) Size() (n int) {
	var l int
	_ = l
	l = len(m.Label)
	if l > 0 {
		n += 1 + l + sovPullRequest(uint64(l))
	}
	l = len(m.Ref)
	if l > 0 {
		n += 1 + l + sovPullRequest(uint64(l))
	}
	l = len(m.Sha)
	if l > 0 {
		n += 1 + l + sovPullRequest(uint64(l))
	}
	if m.User != nil {
		l = m.User.Size()
		n += 1 + l + sovPullRequest(uint64(l))
	}
	if m.Repo != nil {
		l = m.Repo.Size()
		n += 1 + l + sovPullRequest(uint64(l))
	}
	return n
}

func (m *LinkHref) Size() (n int) {
	var l int
	_ = l
	l = len(m.Href)
	if l > 0 {
		n += 1 + l + sovPullRequest(uint64(l))
	}
	return n
}

func (m *Links) Size() (n int) {
	var l int
	_ = l
	if m.Self != nil {
		l = m.Self.Size()
		n += 1 + l + sovPullRequest(uint64(l))
	}
	if m.Html != nil {
		l = m.Html.Size()
		n += 1 + l + sovPullRequest(uint64(l))
	}
	if m.Issue != nil {
		l = m.Issue.Size()
		n += 1 + l + sovPullRequest(uint64(l))
	}
	if m.Comments != nil {
		l = m.Comments.Size()
		n += 1 + l + sovPullRequest(uint64(l))
	}
	if m.ReviewComments != nil {
		l = m.ReviewComments.Size()
		n += 1 + l + sovPullRequest(uint64(l))
	}
	if m.ReviewComment != nil {
		l = m.ReviewComment.Size()
		n += 1 + l + sovPullRequest(uint64(l))
	}
	if m.Commits != nil {
		l = m.Commits.Size()
		n += 1 + l + sovPullRequest(uint64(l))
	}
	if m.Statuses != nil {
		l = m.Statuses.Size()
		n += 1 + l + sovPullRequest(uint64(l))
	}
	return n
}

func (m *PullRequest) Size() (n int) {
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovPullRequest(uint64(m.Id))
	}
	l = len(m.Url)
	if l > 0 {
		n += 1 + l + sovPullRequest(uint64(l))
	}
	l = len(m.HtmlUrl)
	if l > 0 {
		n += 1 + l + sovPullRequest(uint64(l))
	}
	l = len(m.DiffUrl)
	if l > 0 {
		n += 1 + l + sovPullRequest(uint64(l))
	}
	l = len(m.PatchUrl)
	if l > 0 {
		n += 1 + l + sovPullRequest(uint64(l))
	}
	l = len(m.IssueUrl)
	if l > 0 {
		n += 1 + l + sovPullRequest(uint64(l))
	}
	l = len(m.CommitsUrl)
	if l > 0 {
		n += 1 + l + sovPullRequest(uint64(l))
	}
	l = len(m.ReviewCommentsUrl)
	if l > 0 {
		n += 1 + l + sovPullRequest(uint64(l))
	}
	l = len(m.ReviewCommentUrl)
	if l > 0 {
		n += 1 + l + sovPullRequest(uint64(l))
	}
	l = len(m.CommentsUrl)
	if l > 0 {
		n += 1 + l + sovPullRequest(uint64(l))
	}
	l = len(m.StatusesUrl)
	if l > 0 {
		n += 1 + l + sovPullRequest(uint64(l))
	}
	if m.Number != 0 {
		n += 1 + sovPullRequest(uint64(m.Number))
	}
	l = len(m.State)
	if l > 0 {
		n += 1 + l + sovPullRequest(uint64(l))
	}
	l = len(m.Title)
	if l > 0 {
		n += 1 + l + sovPullRequest(uint64(l))
	}
	l = len(m.Body)
	if l > 0 {
		n += 1 + l + sovPullRequest(uint64(l))
	}
	if m.Assignee != nil {
		l = m.Assignee.Size()
		n += 2 + l + sovPullRequest(uint64(l))
	}
	if m.Milestone != nil {
		l = m.Milestone.Size()
		n += 2 + l + sovPullRequest(uint64(l))
	}
	if m.Locked {
		n += 3
	}
	l = len(m.CreatedAt)
	if l > 0 {
		n += 2 + l + sovPullRequest(uint64(l))
	}
	l = len(m.UpdatedAt)
	if l > 0 {
		n += 2 + l + sovPullRequest(uint64(l))
	}
	l = len(m.ClosedAt)
	if l > 0 {
		n += 2 + l + sovPullRequest(uint64(l))
	}
	l = len(m.MergedAt)
	if l > 0 {
		n += 2 + l + sovPullRequest(uint64(l))
	}
	if m.Head != nil {
		l = m.Head.Size()
		n += 2 + l + sovPullRequest(uint64(l))
	}
	if m.Base != nil {
		l = m.Base.Size()
		n += 2 + l + sovPullRequest(uint64(l))
	}
	if m.User != nil {
		l = m.User.Size()
		n += 2 + l + sovPullRequest(uint64(l))
	}
	l = len(m.MergeCommitSha)
	if l > 0 {
		n += 2 + l + sovPullRequest(uint64(l))
	}
	if m.Merged {
		n += 3
	}
	if m.Mergeable {
		n += 3
	}
	if m.XLinks != nil {
		l = m.XLinks.Size()
		n += 2 + l + sovPullRequest(uint64(l))
	}
	if m.MergedBy != nil {
		l = m.MergedBy.Size()
		n += 2 + l + sovPullRequest(uint64(l))
	}
	if m.Comments != 0 {
		n += 2 + sovPullRequest(uint64(m.Comments))
	}
	if m.Commits != 0 {
		n += 2 + sovPullRequest(uint64(m.Commits))
	}
	if m.Additions != 0 {
		n += 2 + sovPullRequest(uint64(m.Additions))
	}
	if m.Deletions != 0 {
		n += 2 + sovPullRequest(uint64(m.Deletions))
	}
	if m.ChangedFiles != 0 {
		n += 2 + sovPullRequest(uint64(m.ChangedFiles))
	}
	if m.Reactions != nil {
		l = m.Reactions.Size()
		n += 2 + l + sovPullRequest(uint64(l))
	}
	return n
}

func sovPullRequest(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozPullRequest(x uint64) (n int) {
	return sovPullRequest(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *RepositoryRef) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPullRequest
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RepositoryRef: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RepositoryRef: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Label", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPullRequest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPullRequest
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Label = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ref", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPullRequest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPullRequest
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Ref = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sha", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPullRequest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPullRequest
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sha = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field User", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPullRequest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPullRequest
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.User == nil {
				m.User = &User{}
			}
			if err := m.User.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Repo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPullRequest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPullRequest
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Repo == nil {
				m.Repo = &Repository{}
			}
			if err := m.Repo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPullRequest(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPullRequest
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LinkHref) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPullRequest
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LinkHref: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LinkHref: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Href", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPullRequest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPullRequest
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Href = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPullRequest(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPullRequest
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Links) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPullRequest
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Links: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Links: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Self", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPullRequest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPullRequest
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Self == nil {
				m.Self = &LinkHref{}
			}
			if err := m.Self.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Html", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPullRequest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPullRequest
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Html == nil {
				m.Html = &LinkHref{}
			}
			if err := m.Html.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Issue", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPullRequest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPullRequest
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Issue == nil {
				m.Issue = &LinkHref{}
			}
			if err := m.Issue.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Comments", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPullRequest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPullRequest
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Comments == nil {
				m.Comments = &LinkHref{}
			}
			if err := m.Comments.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReviewComments", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPullRequest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPullRequest
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ReviewComments == nil {
				m.ReviewComments = &LinkHref{}
			}
			if err := m.ReviewComments.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReviewComment", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPullRequest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPullRequest
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ReviewComment == nil {
				m.ReviewComment = &LinkHref{}
			}
			if err := m.ReviewComment.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Commits", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPullRequest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPullRequest
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Commits == nil {
				m.Commits = &LinkHref{}
			}
			if err := m.Commits.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Statuses", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPullRequest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPullRequest
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Statuses == nil {
				m.Statuses = &LinkHref{}
			}
			if err := m.Statuses.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPullRequest(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPullRequest
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PullRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPullRequest
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PullRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PullRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPullRequest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Url", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPullRequest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPullRequest
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Url = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HtmlUrl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPullRequest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPullRequest
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.HtmlUrl = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DiffUrl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPullRequest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPullRequest
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DiffUrl = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PatchUrl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPullRequest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPullRequest
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PatchUrl = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IssueUrl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPullRequest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPullRequest
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.IssueUrl = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CommitsUrl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPullRequest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPullRequest
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CommitsUrl = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReviewCommentsUrl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPullRequest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPullRequest
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ReviewCommentsUrl = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReviewCommentUrl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPullRequest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPullRequest
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ReviewCommentUrl = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CommentsUrl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPullRequest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPullRequest
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CommentsUrl = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StatusesUrl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPullRequest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPullRequest
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StatusesUrl = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Number", wireType)
			}
			m.Number = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPullRequest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Number |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPullRequest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPullRequest
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.State = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPullRequest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPullRequest
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Title = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Body", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPullRequest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPullRequest
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Body = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 16:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Assignee", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPullRequest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPullRequest
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Assignee == nil {
				m.Assignee = &User{}
			}
			if err := m.Assignee.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 17:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Milestone", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPullRequest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPullRequest
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Milestone == nil {
				m.Milestone = &Milestone{}
			}
			if err := m.Milestone.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 18:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Locked", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPullRequest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Locked = bool(v != 0)
		case 19:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatedAt", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPullRequest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPullRequest
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CreatedAt = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 20:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdatedAt", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPullRequest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPullRequest
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UpdatedAt = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 21:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClosedAt", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPullRequest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPullRequest
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClosedAt = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 22:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MergedAt", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPullRequest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPullRequest
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MergedAt = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 23:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Head", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPullRequest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPullRequest
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Head == nil {
				m.Head = &RepositoryRef{}
			}
			if err := m.Head.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 24:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Base", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPullRequest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPullRequest
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Base == nil {
				m.Base = &RepositoryRef{}
			}
			if err := m.Base.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 25:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field User", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPullRequest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPullRequest
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.User == nil {
				m.User = &User{}
			}
			if err := m.User.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 26:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MergeCommitSha", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPullRequest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPullRequest
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MergeCommitSha = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 27:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Merged", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPullRequest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Merged = bool(v != 0)
		case 28:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mergeable", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPullRequest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Mergeable = bool(v != 0)
		case 29:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field XLinks", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPullRequest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPullRequest
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.XLinks == nil {
				m.XLinks = &Links{}
			}
			if err := m.XLinks.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 30:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MergedBy", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPullRequest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPullRequest
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.MergedBy == nil {
				m.MergedBy = &User{}
			}
			if err := m.MergedBy.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 31:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Comments", wireType)
			}
			m.Comments = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPullRequest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Comments |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 32:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Commits", wireType)
			}
			m.Commits = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPullRequest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Commits |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 33:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Additions", wireType)
			}
			m.Additions = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPullRequest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Additions |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 34:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Deletions", wireType)
			}
			m.Deletions = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPullRequest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Deletions |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 35:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChangedFiles", wireType)
			}
			m.ChangedFiles = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPullRequest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChangedFiles |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 36:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Reactions", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPullRequest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPullRequest
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Reactions == nil {
				m.Reactions = &Reactions{}
			}
			if err := m.Reactions.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPullRequest(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPullRequest
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipPullRequest(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowPullRequest
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPullRequest
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPullRequest
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthPullRequest
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowPullRequest
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipPullRequest(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthPullRequest = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowPullRequest   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("pull_request.proto", fileDescriptorPullRequest) }

var fileDescriptorPullRequest = []byte{
	// 831 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x7c, 0x95, 0x4b, 0x4f, 0xc3, 0x46,
	0x10, 0xc7, 0x09, 0xe4, 0xe1, 0x4c, 0x1e, 0x84, 0xe5, 0xd1, 0x25, 0x40, 0x80, 0x80, 0x2a, 0xa8,
	0x68, 0x90, 0xe8, 0xa1, 0xea, 0xb1, 0x20, 0x55, 0x3d, 0xb4, 0x52, 0xe5, 0x8a, 0x73, 0xe4, 0xc7,
	0x26, 0xb1, 0x70, 0xe2, 0xd4, 0x6b, 0xb7, 0xca, 0xe7, 0xe8, 0x85, 0x8f, 0xc4, 0xb1, 0x1f, 0xa1,
	0x8f, 0x0f, 0xd1, 0x6b, 0x77, 0x66, 0x6c, 0x27, 0x69, 0x93, 0x1e, 0xa2, 0xec, 0xfe, 0x7f, 0xff,
	0xb1, 0x67, 0x77, 0x67, 0xc7, 0x20, 0xe6, 0x69, 0x18, 0x0e, 0x63, 0xf5, 0x53, 0xaa, 0x74, 0x32,
	0x98, 0xc7, 0x51, 0x12, 0x89, 0xea, 0x38, 0x48, 0x26, 0xa9, 0xdb, 0xfd, 0x9c, 0xff, 0x07, 0x5e,
	0x34, 0x7d, 0x1c, 0x47, 0xe3, 0xe8, 0x91, 0xb0, 0x9b, 0x8e, 0x68, 0x46, 0x13, 0x1a, 0x71, 0x58,
	0x17, 0x52, 0xad, 0xe2, 0x6c, 0xdc, 0x89, 0xd5, 0x3c, 0xd2, 0x41, 0x12, 0xc5, 0x8b, 0x4c, 0xd9,
	0x9f, 0x06, 0xa1, 0x79, 0x45, 0x34, 0x53, 0xb9, 0x10, 0x2b, 0xc7, 0x4b, 0x82, 0x68, 0xa6, 0x59,
	0xe8, 0xff, 0x5a, 0x82, 0x96, 0x5d, 0x84, 0xd9, 0x6a, 0x24, 0x8e, 0xa0, 0x12, 0x3a, 0xae, 0x0a,
	0x65, 0xe9, 0xaa, 0x74, 0x57, 0xb7, 0x79, 0x22, 0x3a, 0xb0, 0x17, 0xab, 0x91, 0xdc, 0x25, 0x0d,
	0x87, 0xa8, 0xe8, 0x89, 0x23, 0xf7, 0x58, 0x31, 0x43, 0x71, 0x05, 0x65, 0xcc, 0x46, 0x96, 0x8d,
	0xd4, 0x78, 0x6a, 0x0e, 0xb2, 0x95, 0xbc, 0x1a, 0xcd, 0x26, 0x22, 0x3e, 0x85, 0x32, 0xe6, 0x28,
	0x2b, 0xe4, 0x10, 0xb9, 0x63, 0x25, 0x01, 0xe2, 0xfd, 0x1e, 0x58, 0xdf, 0x05, 0xb3, 0xb7, 0x6f,
	0xf1, 0x3d, 0x02, 0xca, 0x13, 0x7c, 0x35, 0xa7, 0x43, 0xe3, 0xfe, 0xdf, 0xbb, 0x50, 0x41, 0x83,
	0x16, 0xb7, 0x50, 0xd6, 0x2a, 0x64, 0xda, 0x78, 0xea, 0xe4, 0x4f, 0xcc, 0xa3, 0x6d, 0xa2, 0xe8,
	0x9a, 0x24, 0xd3, 0x90, 0xd2, 0xdf, 0xe8, 0x42, 0x6a, 0xb2, 0xab, 0x04, 0x5a, 0xa7, 0x8a, 0xd6,
	0xb4, 0xc9, 0xc6, 0x58, 0x3c, 0x80, 0x65, 0x4e, 0x67, 0xaa, 0x66, 0x89, 0xce, 0xd6, 0xfa, 0x5f,
	0x6b, 0xe1, 0x10, 0x5f, 0x81, 0xd9, 0xf4, 0x9f, 0x03, 0xf5, 0xcb, 0xb0, 0x08, 0xaa, 0x6c, 0x09,
	0x6a, 0xb3, 0xf1, 0x25, 0x0f, 0xfd, 0x12, 0xda, 0xeb, 0xa1, 0xb2, 0xba, 0x25, 0xb2, 0xb5, 0x16,
	0x29, 0x3e, 0x83, 0x1a, 0x46, 0x04, 0xe6, 0x5d, 0xb5, 0x2d, 0x11, 0xb9, 0x01, 0x57, 0xa3, 0x13,
	0x27, 0x31, 0xe7, 0xa3, 0xa5, 0xb5, 0x6d, 0x35, 0xb9, 0xa3, 0xff, 0x5e, 0x87, 0xc6, 0x0f, 0xa6,
	0x7a, 0x6d, 0x2e, 0x5e, 0xd1, 0x86, 0xdd, 0xc0, 0xa7, 0xdd, 0xaf, 0xd8, 0x66, 0x84, 0x55, 0x91,
	0xc6, 0x61, 0x5e, 0x27, 0x66, 0x28, 0x4e, 0xc1, 0xc2, 0xdd, 0x1d, 0xa2, 0xcc, 0xc5, 0x52, 0xc3,
	0xf9, 0x2b, 0x23, 0x3f, 0x18, 0x8d, 0x08, 0x95, 0x19, 0xe1, 0x1c, 0xd1, 0x19, 0xd4, 0xe7, 0x4e,
	0xe2, 0x4d, 0x88, 0x55, 0x88, 0x59, 0x24, 0x64, 0x90, 0x4e, 0x82, 0x60, 0x95, 0x21, 0x09, 0x08,
	0x2f, 0xa1, 0x91, 0x2d, 0x8d, 0x70, 0x8d, 0x30, 0x64, 0x12, 0x1a, 0x06, 0x70, 0xf8, 0xaf, 0x03,
	0x21, 0xa3, 0x45, 0xc6, 0x83, 0xf5, 0x23, 0x40, 0xff, 0x03, 0x88, 0x75, 0x3f, 0xd9, 0xeb, 0x64,
	0xef, 0xac, 0xd9, 0xd1, 0x7d, 0x0d, 0xcd, 0xb5, 0xc7, 0x02, 0xf9, 0x1a, 0xde, 0xca, 0x03, 0x8d,
	0x25, 0xdf, 0x4f, 0xb2, 0x34, 0xd8, 0x92, 0x6b, 0x68, 0x39, 0x81, 0xea, 0x2c, 0x9d, 0xba, 0xe6,
	0x32, 0x35, 0x69, 0x6b, 0xb3, 0x19, 0x5e, 0x4e, 0xb4, 0x29, 0xd9, 0xe2, 0xcb, 0x49, 0x13, 0x54,
	0x93, 0x20, 0x09, 0x95, 0x6c, 0xb3, 0x4a, 0x13, 0xbc, 0x38, 0x6e, 0xe4, 0x2f, 0xe4, 0x3e, 0x5f,
	0x1c, 0x1c, 0x8b, 0x3b, 0xb0, 0x1c, 0xad, 0x83, 0xf1, 0x4c, 0x29, 0xd9, 0xd9, 0x70, 0x4d, 0x0b,
	0x2a, 0x1e, 0xa1, 0x5e, 0x34, 0x0f, 0x79, 0x40, 0xd6, 0x83, 0xdc, 0xfa, 0x7d, 0x0e, 0xec, 0xa5,
	0x07, 0x53, 0x0e, 0x23, 0xef, 0x4d, 0xf9, 0x52, 0x18, 0xb7, 0x65, 0x67, 0x33, 0x71, 0x01, 0xe0,
	0x99, 0xae, 0x93, 0x28, 0x7f, 0xe8, 0x24, 0xf2, 0x90, 0x92, 0xa9, 0x67, 0xca, 0xd7, 0x09, 0xe2,
	0x74, 0xee, 0xe7, 0xf8, 0x88, 0x71, 0xa6, 0x18, 0x6c, 0x8e, 0xda, 0x0b, 0x23, 0xcd, 0xf4, 0x98,
	0x8f, 0x9a, 0x05, 0x86, 0x53, 0x15, 0x8f, 0x19, 0x9e, 0x30, 0x64, 0xc1, 0xc0, 0x7b, 0x73, 0xe7,
	0x95, 0xe3, 0xcb, 0x4f, 0x28, 0xf7, 0xe3, 0x0d, 0xbd, 0x86, 0x2e, 0xbe, 0xb1, 0xa0, 0xd5, 0x75,
	0xb4, 0x92, 0xf2, 0x7f, 0xad, 0x68, 0x29, 0x7a, 0xdc, 0xe9, 0xd6, 0x1e, 0x77, 0x07, 0x1d, 0xca,
	0x61, 0xc8, 0x25, 0x37, 0xc4, 0x26, 0xd9, 0xa5, 0xdc, 0xda, 0xa4, 0xbf, 0x90, 0xfc, 0xa3, 0xe9,
	0x97, 0x66, 0xc7, 0x38, 0x5b, 0x79, 0xc6, 0x3b, 0xc6, 0x33, 0x71, 0x9e, 0x2d, 0xcb, 0x71, 0xcd,
	0x91, 0x9e, 0x13, 0x5a, 0x0a, 0xa6, 0x97, 0x55, 0x87, 0x21, 0xf6, 0x3e, 0x79, 0x41, 0x39, 0xb4,
	0x56, 0x6f, 0xab, 0xb6, 0xb3, 0xbe, 0x78, 0x5f, 0x6c, 0x8d, 0xbb, 0x90, 0xbd, 0x4d, 0x27, 0xcd,
	0xf8, 0x79, 0x21, 0xba, 0x2b, 0xed, 0xec, 0x92, 0xaa, 0x6d, 0xd9, 0xbc, 0xe4, 0xb2, 0x91, 0x5c,
	0x11, 0x2a, 0xda, 0x86, 0x49, 0xd2, 0xf1, 0xfd, 0x80, 0xbe, 0x25, 0xf2, 0x9a, 0xd8, 0x52, 0x40,
	0xea, 0xab, 0x50, 0x31, 0xed, 0x33, 0x2d, 0x04, 0x71, 0x03, 0x2d, 0x6f, 0xe2, 0xcc, 0x30, 0xbb,
	0x11, 0xd6, 0x8f, 0xbc, 0x21, 0x47, 0x33, 0x13, 0xbf, 0x41, 0x0d, 0x0b, 0xb0, 0xf8, 0x58, 0xc9,
	0xdb, 0xf5, 0x02, 0xb4, 0x73, 0x60, 0x2f, 0x3d, 0xcf, 0x47, 0x1f, 0x7f, 0xf4, 0x76, 0x3e, 0xfe,
	0xec, 0x95, 0x7e, 0x33, 0xbf, 0xdf, 0xcd, 0xef, 0xfd, 0xaf, 0xde, 0x8e, 0x5b, 0xa5, 0xef, 0xdc,
	0x17, 0xff, 0x04, 0x00, 0x00, 0xff, 0xff, 0x98, 0x98, 0xa9, 0xbe, 0x74, 0x07, 0x00, 0x00,
}
