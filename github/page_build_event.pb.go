// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: page_build_event.proto

package github

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/protobuf/gogoproto"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type BuildError struct {
	Message string `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
}

func (m *BuildError) Reset()                    { *m = BuildError{} }
func (m *BuildError) String() string            { return proto.CompactTextString(m) }
func (*BuildError) ProtoMessage()               {}
func (*BuildError) Descriptor() ([]byte, []int) { return fileDescriptorPageBuildEvent, []int{0} }

type Build struct {
	Url       string      `protobuf:"bytes,1,opt,name=url,proto3" json:"url,omitempty"`
	Status    string      `protobuf:"bytes,2,opt,name=status,proto3" json:"status,omitempty"`
	Error     *BuildError `protobuf:"bytes,3,opt,name=error" json:"error,omitempty"`
	Pusher    *User       `protobuf:"bytes,4,opt,name=pusher" json:"pusher,omitempty"`
	Commit    string      `protobuf:"bytes,5,opt,name=commit,proto3" json:"commit,omitempty"`
	Duration  int32       `protobuf:"varint,6,opt,name=duration,proto3" json:"duration,omitempty"`
	CreatedAt string      `protobuf:"bytes,7,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	UpdatedAt string      `protobuf:"bytes,8,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
}

func (m *Build) Reset()                    { *m = Build{} }
func (m *Build) String() string            { return proto.CompactTextString(m) }
func (*Build) ProtoMessage()               {}
func (*Build) Descriptor() ([]byte, []int) { return fileDescriptorPageBuildEvent, []int{1} }

type PageBuildEvent struct {
	Id           int32         `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Build        *Build        `protobuf:"bytes,2,opt,name=build" json:"build,omitempty"`
	Repository   *Repository   `protobuf:"bytes,3,opt,name=repository" json:"repository,omitempty"`
	Sender       *User         `protobuf:"bytes,4,opt,name=sender" json:"sender,omitempty"`
	Installation *Installation `protobuf:"bytes,5,opt,name=installation" json:"installation,omitempty"`
	Organization *User         `protobuf:"bytes,6,opt,name=organization" json:"organization,omitempty"`
}

func (m *PageBuildEvent) Reset()                    { *m = PageBuildEvent{} }
func (m *PageBuildEvent) String() string            { return proto.CompactTextString(m) }
func (*PageBuildEvent) ProtoMessage()               {}
func (*PageBuildEvent) Descriptor() ([]byte, []int) { return fileDescriptorPageBuildEvent, []int{2} }

func init() {
	proto.RegisterType((*BuildError)(nil), "github.BuildError")
	proto.RegisterType((*Build)(nil), "github.Build")
	proto.RegisterType((*PageBuildEvent)(nil), "github.PageBuildEvent")
}
func (m *BuildError) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BuildError) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Message) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintPageBuildEvent(dAtA, i, uint64(len(m.Message)))
		i += copy(dAtA[i:], m.Message)
	}
	return i, nil
}

func (m *Build) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Build) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Url) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintPageBuildEvent(dAtA, i, uint64(len(m.Url)))
		i += copy(dAtA[i:], m.Url)
	}
	if len(m.Status) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintPageBuildEvent(dAtA, i, uint64(len(m.Status)))
		i += copy(dAtA[i:], m.Status)
	}
	if m.Error != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintPageBuildEvent(dAtA, i, uint64(m.Error.Size()))
		n1, err := m.Error.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	if m.Pusher != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintPageBuildEvent(dAtA, i, uint64(m.Pusher.Size()))
		n2, err := m.Pusher.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n2
	}
	if len(m.Commit) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintPageBuildEvent(dAtA, i, uint64(len(m.Commit)))
		i += copy(dAtA[i:], m.Commit)
	}
	if m.Duration != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintPageBuildEvent(dAtA, i, uint64(m.Duration))
	}
	if len(m.CreatedAt) > 0 {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintPageBuildEvent(dAtA, i, uint64(len(m.CreatedAt)))
		i += copy(dAtA[i:], m.CreatedAt)
	}
	if len(m.UpdatedAt) > 0 {
		dAtA[i] = 0x42
		i++
		i = encodeVarintPageBuildEvent(dAtA, i, uint64(len(m.UpdatedAt)))
		i += copy(dAtA[i:], m.UpdatedAt)
	}
	return i, nil
}

func (m *PageBuildEvent) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PageBuildEvent) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintPageBuildEvent(dAtA, i, uint64(m.Id))
	}
	if m.Build != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintPageBuildEvent(dAtA, i, uint64(m.Build.Size()))
		n3, err := m.Build.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n3
	}
	if m.Repository != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintPageBuildEvent(dAtA, i, uint64(m.Repository.Size()))
		n4, err := m.Repository.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n4
	}
	if m.Sender != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintPageBuildEvent(dAtA, i, uint64(m.Sender.Size()))
		n5, err := m.Sender.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n5
	}
	if m.Installation != nil {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintPageBuildEvent(dAtA, i, uint64(m.Installation.Size()))
		n6, err := m.Installation.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n6
	}
	if m.Organization != nil {
		dAtA[i] = 0x32
		i++
		i = encodeVarintPageBuildEvent(dAtA, i, uint64(m.Organization.Size()))
		n7, err := m.Organization.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n7
	}
	return i, nil
}

func encodeFixed64PageBuildEvent(dAtA []byte, offset int, v uint64) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	dAtA[offset+4] = uint8(v >> 32)
	dAtA[offset+5] = uint8(v >> 40)
	dAtA[offset+6] = uint8(v >> 48)
	dAtA[offset+7] = uint8(v >> 56)
	return offset + 8
}
func encodeFixed32PageBuildEvent(dAtA []byte, offset int, v uint32) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	return offset + 4
}
func encodeVarintPageBuildEvent(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *BuildError) Size() (n int) {
	var l int
	_ = l
	l = len(m.Message)
	if l > 0 {
		n += 1 + l + sovPageBuildEvent(uint64(l))
	}
	return n
}

func (m *Build) Size() (n int) {
	var l int
	_ = l
	l = len(m.Url)
	if l > 0 {
		n += 1 + l + sovPageBuildEvent(uint64(l))
	}
	l = len(m.Status)
	if l > 0 {
		n += 1 + l + sovPageBuildEvent(uint64(l))
	}
	if m.Error != nil {
		l = m.Error.Size()
		n += 1 + l + sovPageBuildEvent(uint64(l))
	}
	if m.Pusher != nil {
		l = m.Pusher.Size()
		n += 1 + l + sovPageBuildEvent(uint64(l))
	}
	l = len(m.Commit)
	if l > 0 {
		n += 1 + l + sovPageBuildEvent(uint64(l))
	}
	if m.Duration != 0 {
		n += 1 + sovPageBuildEvent(uint64(m.Duration))
	}
	l = len(m.CreatedAt)
	if l > 0 {
		n += 1 + l + sovPageBuildEvent(uint64(l))
	}
	l = len(m.UpdatedAt)
	if l > 0 {
		n += 1 + l + sovPageBuildEvent(uint64(l))
	}
	return n
}

func (m *PageBuildEvent) Size() (n int) {
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovPageBuildEvent(uint64(m.Id))
	}
	if m.Build != nil {
		l = m.Build.Size()
		n += 1 + l + sovPageBuildEvent(uint64(l))
	}
	if m.Repository != nil {
		l = m.Repository.Size()
		n += 1 + l + sovPageBuildEvent(uint64(l))
	}
	if m.Sender != nil {
		l = m.Sender.Size()
		n += 1 + l + sovPageBuildEvent(uint64(l))
	}
	if m.Installation != nil {
		l = m.Installation.Size()
		n += 1 + l + sovPageBuildEvent(uint64(l))
	}
	if m.Organization != nil {
		l = m.Organization.Size()
		n += 1 + l + sovPageBuildEvent(uint64(l))
	}
	return n
}

func sovPageBuildEvent(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozPageBuildEvent(x uint64) (n int) {
	return sovPageBuildEvent(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *BuildError) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPageBuildEvent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BuildError: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BuildError: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPageBuildEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPageBuildEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Message = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPageBuildEvent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPageBuildEvent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Build) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPageBuildEvent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Build: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Build: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Url", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPageBuildEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPageBuildEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Url = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPageBuildEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPageBuildEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Status = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPageBuildEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPageBuildEvent
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Error == nil {
				m.Error = &BuildError{}
			}
			if err := m.Error.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pusher", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPageBuildEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPageBuildEvent
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pusher == nil {
				m.Pusher = &User{}
			}
			if err := m.Pusher.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Commit", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPageBuildEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPageBuildEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Commit = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Duration", wireType)
			}
			m.Duration = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPageBuildEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Duration |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatedAt", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPageBuildEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPageBuildEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CreatedAt = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdatedAt", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPageBuildEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPageBuildEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UpdatedAt = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPageBuildEvent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPageBuildEvent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PageBuildEvent) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPageBuildEvent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PageBuildEvent: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PageBuildEvent: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPageBuildEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Build", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPageBuildEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPageBuildEvent
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Build == nil {
				m.Build = &Build{}
			}
			if err := m.Build.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Repository", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPageBuildEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPageBuildEvent
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Repository == nil {
				m.Repository = &Repository{}
			}
			if err := m.Repository.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sender", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPageBuildEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPageBuildEvent
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Sender == nil {
				m.Sender = &User{}
			}
			if err := m.Sender.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Installation", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPageBuildEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPageBuildEvent
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Installation == nil {
				m.Installation = &Installation{}
			}
			if err := m.Installation.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Organization", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPageBuildEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPageBuildEvent
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Organization == nil {
				m.Organization = &User{}
			}
			if err := m.Organization.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPageBuildEvent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPageBuildEvent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipPageBuildEvent(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowPageBuildEvent
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPageBuildEvent
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPageBuildEvent
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthPageBuildEvent
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowPageBuildEvent
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipPageBuildEvent(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthPageBuildEvent = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowPageBuildEvent   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("page_build_event.proto", fileDescriptorPageBuildEvent) }

var fileDescriptorPageBuildEvent = []byte{
	// 409 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x74, 0x92, 0x4f, 0x8a, 0xdb, 0x30,
	0x14, 0xc6, 0x47, 0x9e, 0xda, 0x33, 0xf3, 0x92, 0x0e, 0x83, 0x18, 0x06, 0x11, 0xa8, 0x09, 0x69,
	0x29, 0xde, 0x34, 0x53, 0xdc, 0x4d, 0xb7, 0x09, 0x74, 0xd1, 0x5d, 0x11, 0x74, 0x1d, 0xe4, 0x58,
	0x75, 0x04, 0xb6, 0x65, 0xf4, 0xa7, 0xd0, 0x5e, 0xa1, 0x17, 0xe8, 0x91, 0xb2, 0xec, 0x11, 0xda,
	0xf4, 0x08, 0xbd, 0x40, 0xb1, 0x24, 0xe7, 0x1f, 0xcc, 0xca, 0xfa, 0xde, 0xef, 0x93, 0x9f, 0xdf,
	0xf7, 0x0c, 0x0f, 0x1d, 0xab, 0xf8, 0xaa, 0xb0, 0xa2, 0x2e, 0x57, 0xfc, 0x2b, 0x6f, 0xcd, 0xbc,
	0x53, 0xd2, 0x48, 0x9c, 0x54, 0xc2, 0x6c, 0x6c, 0x31, 0x79, 0xe3, 0x9f, 0xf3, 0xb5, 0x6c, 0x1e,
	0x2b, 0x59, 0xc9, 0x47, 0x87, 0x0b, 0xfb, 0xc5, 0x29, 0x27, 0xdc, 0xc9, 0x5f, 0x9b, 0x80, 0xd5,
	0x5c, 0x85, 0xf3, 0x9d, 0xe2, 0x9d, 0xd4, 0xc2, 0x48, 0xf5, 0x2d, 0x54, 0xb0, 0x68, 0xb5, 0x61,
	0x75, 0xcd, 0x8c, 0x90, 0xad, 0xaf, 0xcd, 0x5e, 0x03, 0x2c, 0xfb, 0xee, 0x1f, 0x94, 0x92, 0x0a,
	0x13, 0xb8, 0x6a, 0xb8, 0xd6, 0xac, 0xe2, 0x04, 0x4d, 0x51, 0x76, 0x43, 0x07, 0x39, 0xfb, 0x87,
	0x20, 0x76, 0x46, 0x7c, 0x07, 0x97, 0x56, 0xd5, 0x81, 0xf7, 0x47, 0xfc, 0x00, 0x89, 0x36, 0xcc,
	0x58, 0x4d, 0x22, 0x57, 0x0c, 0x0a, 0x67, 0x10, 0xf3, 0xfe, 0xb5, 0xe4, 0x72, 0x8a, 0xb2, 0x51,
	0x8e, 0xe7, 0x61, 0x98, 0x43, 0x43, 0xea, 0x0d, 0xf8, 0x15, 0x24, 0x9d, 0xd5, 0x1b, 0xae, 0xc8,
	0x33, 0x67, 0x1d, 0x0f, 0xd6, 0xcf, 0x9a, 0x2b, 0x1a, 0x58, 0xdf, 0x67, 0x2d, 0x9b, 0x46, 0x18,
	0x12, 0xfb, 0x3e, 0x5e, 0xe1, 0x09, 0x5c, 0x97, 0x56, 0xb9, 0xa9, 0x48, 0x32, 0x45, 0x59, 0x4c,
	0xf7, 0x1a, 0xbf, 0x00, 0x58, 0x2b, 0xce, 0x0c, 0x2f, 0x57, 0xcc, 0x90, 0x2b, 0x77, 0xef, 0x26,
	0x54, 0x16, 0xa6, 0xc7, 0xb6, 0x2b, 0x07, 0x7c, 0xed, 0x71, 0xa8, 0x2c, 0xcc, 0xec, 0x47, 0x04,
	0xb7, 0x9f, 0x58, 0xc5, 0xfd, 0x17, 0xf7, 0xfb, 0xc1, 0xb7, 0x10, 0x89, 0xd2, 0x4d, 0x1f, 0xd3,
	0x48, 0x94, 0xf8, 0x25, 0xc4, 0x6e, 0x7d, 0x6e, 0xf6, 0x51, 0xfe, 0xfc, 0x64, 0x48, 0xea, 0x19,
	0xce, 0x01, 0x0e, 0xdb, 0x38, 0x8f, 0x83, 0xee, 0x09, 0x3d, 0x72, 0xf5, 0x99, 0x68, 0xde, 0x96,
	0x4f, 0x65, 0xe2, 0x19, 0x7e, 0x0f, 0xe3, 0xe3, 0xad, 0xba, 0x64, 0x46, 0xf9, 0xfd, 0xe0, 0xfd,
	0x78, 0xc4, 0xe8, 0x89, 0x13, 0xbf, 0x85, 0xb1, 0x54, 0x15, 0x6b, 0xc5, 0xf7, 0x43, 0x72, 0xe7,
	0x5d, 0x4e, 0x1c, 0xcb, 0xfb, 0xed, 0x9f, 0xf4, 0x62, 0xbb, 0x4b, 0xd1, 0xaf, 0x5d, 0x8a, 0x7e,
	0xef, 0x52, 0xf4, 0xf3, 0x6f, 0x7a, 0x51, 0x24, 0xee, 0x47, 0x7a, 0xf7, 0x3f, 0x00, 0x00, 0xff,
	0xff, 0x35, 0xe0, 0x85, 0x51, 0xcb, 0x02, 0x00, 0x00,
}
