// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: label_event.proto

package github

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/protobuf/gogoproto"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type LabelChange struct {
	From string `protobuf:"bytes,1,opt,name=from,proto3" json:"from,omitempty"`
}

func (m *LabelChange) Reset()                    { *m = LabelChange{} }
func (m *LabelChange) String() string            { return proto.CompactTextString(m) }
func (*LabelChange) ProtoMessage()               {}
func (*LabelChange) Descriptor() ([]byte, []int) { return fileDescriptorLabelEvent, []int{0} }

type LabelEvent struct {
	Action       string                  `protobuf:"bytes,1,opt,name=action,proto3" json:"action,omitempty"`
	Label        *Label                  `protobuf:"bytes,2,opt,name=label" json:"label,omitempty"`
	Repository   *Repository             `protobuf:"bytes,3,opt,name=repository" json:"repository,omitempty"`
	Organization *User                   `protobuf:"bytes,4,opt,name=organization" json:"organization,omitempty"`
	Sender       *User                   `protobuf:"bytes,5,opt,name=sender" json:"sender,omitempty"`
	Changes      map[string]*LabelChange `protobuf:"bytes,6,rep,name=changes" json:"changes,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value"`
	Installation *Installation           `protobuf:"bytes,7,opt,name=installation" json:"installation,omitempty"`
}

func (m *LabelEvent) Reset()                    { *m = LabelEvent{} }
func (m *LabelEvent) String() string            { return proto.CompactTextString(m) }
func (*LabelEvent) ProtoMessage()               {}
func (*LabelEvent) Descriptor() ([]byte, []int) { return fileDescriptorLabelEvent, []int{1} }

func init() {
	proto.RegisterType((*LabelChange)(nil), "github.LabelChange")
	proto.RegisterType((*LabelEvent)(nil), "github.LabelEvent")
}
func (m *LabelChange) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LabelChange) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.From) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintLabelEvent(dAtA, i, uint64(len(m.From)))
		i += copy(dAtA[i:], m.From)
	}
	return i, nil
}

func (m *LabelEvent) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LabelEvent) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Action) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintLabelEvent(dAtA, i, uint64(len(m.Action)))
		i += copy(dAtA[i:], m.Action)
	}
	if m.Label != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintLabelEvent(dAtA, i, uint64(m.Label.Size()))
		n1, err := m.Label.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	if m.Repository != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintLabelEvent(dAtA, i, uint64(m.Repository.Size()))
		n2, err := m.Repository.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n2
	}
	if m.Organization != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintLabelEvent(dAtA, i, uint64(m.Organization.Size()))
		n3, err := m.Organization.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n3
	}
	if m.Sender != nil {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintLabelEvent(dAtA, i, uint64(m.Sender.Size()))
		n4, err := m.Sender.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n4
	}
	if len(m.Changes) > 0 {
		for k, _ := range m.Changes {
			dAtA[i] = 0x32
			i++
			v := m.Changes[k]
			msgSize := 0
			if v != nil {
				msgSize = v.Size()
				msgSize += 1 + sovLabelEvent(uint64(msgSize))
			}
			mapSize := 1 + len(k) + sovLabelEvent(uint64(len(k))) + msgSize
			i = encodeVarintLabelEvent(dAtA, i, uint64(mapSize))
			dAtA[i] = 0xa
			i++
			i = encodeVarintLabelEvent(dAtA, i, uint64(len(k)))
			i += copy(dAtA[i:], k)
			if v != nil {
				dAtA[i] = 0x12
				i++
				i = encodeVarintLabelEvent(dAtA, i, uint64(v.Size()))
				n5, err := v.MarshalTo(dAtA[i:])
				if err != nil {
					return 0, err
				}
				i += n5
			}
		}
	}
	if m.Installation != nil {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintLabelEvent(dAtA, i, uint64(m.Installation.Size()))
		n6, err := m.Installation.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n6
	}
	return i, nil
}

func encodeFixed64LabelEvent(dAtA []byte, offset int, v uint64) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	dAtA[offset+4] = uint8(v >> 32)
	dAtA[offset+5] = uint8(v >> 40)
	dAtA[offset+6] = uint8(v >> 48)
	dAtA[offset+7] = uint8(v >> 56)
	return offset + 8
}
func encodeFixed32LabelEvent(dAtA []byte, offset int, v uint32) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	return offset + 4
}
func encodeVarintLabelEvent(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *LabelChange) Size() (n int) {
	var l int
	_ = l
	l = len(m.From)
	if l > 0 {
		n += 1 + l + sovLabelEvent(uint64(l))
	}
	return n
}

func (m *LabelEvent) Size() (n int) {
	var l int
	_ = l
	l = len(m.Action)
	if l > 0 {
		n += 1 + l + sovLabelEvent(uint64(l))
	}
	if m.Label != nil {
		l = m.Label.Size()
		n += 1 + l + sovLabelEvent(uint64(l))
	}
	if m.Repository != nil {
		l = m.Repository.Size()
		n += 1 + l + sovLabelEvent(uint64(l))
	}
	if m.Organization != nil {
		l = m.Organization.Size()
		n += 1 + l + sovLabelEvent(uint64(l))
	}
	if m.Sender != nil {
		l = m.Sender.Size()
		n += 1 + l + sovLabelEvent(uint64(l))
	}
	if len(m.Changes) > 0 {
		for k, v := range m.Changes {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
				l += 1 + sovLabelEvent(uint64(l))
			}
			mapEntrySize := 1 + len(k) + sovLabelEvent(uint64(len(k))) + l
			n += mapEntrySize + 1 + sovLabelEvent(uint64(mapEntrySize))
		}
	}
	if m.Installation != nil {
		l = m.Installation.Size()
		n += 1 + l + sovLabelEvent(uint64(l))
	}
	return n
}

func sovLabelEvent(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozLabelEvent(x uint64) (n int) {
	return sovLabelEvent(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *LabelChange) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLabelEvent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LabelChange: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LabelChange: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field From", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLabelEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLabelEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.From = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLabelEvent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLabelEvent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LabelEvent) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLabelEvent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LabelEvent: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LabelEvent: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Action", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLabelEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLabelEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Action = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Label", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLabelEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLabelEvent
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Label == nil {
				m.Label = &Label{}
			}
			if err := m.Label.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Repository", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLabelEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLabelEvent
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Repository == nil {
				m.Repository = &Repository{}
			}
			if err := m.Repository.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Organization", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLabelEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLabelEvent
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Organization == nil {
				m.Organization = &User{}
			}
			if err := m.Organization.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sender", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLabelEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLabelEvent
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Sender == nil {
				m.Sender = &User{}
			}
			if err := m.Sender.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Changes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLabelEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLabelEvent
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Changes == nil {
				m.Changes = make(map[string]*LabelChange)
			}
			var mapkey string
			var mapvalue *LabelChange
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowLabelEvent
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowLabelEvent
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= (uint64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthLabelEvent
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowLabelEvent
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= (int(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthLabelEvent
					}
					postmsgIndex := iNdEx + mapmsglen
					if mapmsglen < 0 {
						return ErrInvalidLengthLabelEvent
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &LabelChange{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipLabelEvent(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthLabelEvent
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Changes[mapkey] = mapvalue
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Installation", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLabelEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLabelEvent
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Installation == nil {
				m.Installation = &Installation{}
			}
			if err := m.Installation.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLabelEvent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLabelEvent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipLabelEvent(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowLabelEvent
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowLabelEvent
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowLabelEvent
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthLabelEvent
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowLabelEvent
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipLabelEvent(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthLabelEvent = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowLabelEvent   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("label_event.proto", fileDescriptorLabelEvent) }

var fileDescriptorLabelEvent = []byte{
	// 365 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x6c, 0x91, 0xc1, 0x4e, 0xea, 0x50,
	0x10, 0x86, 0x29, 0x85, 0x92, 0x3b, 0xed, 0x4d, 0xb8, 0x73, 0xc9, 0x4d, 0xc3, 0xa2, 0x17, 0xd1,
	0x05, 0x2e, 0x2c, 0x06, 0x37, 0xe8, 0x52, 0xc3, 0xc2, 0xc4, 0xc4, 0xe4, 0x24, 0xae, 0x4d, 0x8b,
	0x87, 0xd2, 0x58, 0x7a, 0xc8, 0x69, 0x4b, 0x82, 0x4f, 0x62, 0xe2, 0x0b, 0xb1, 0xf4, 0x11, 0x14,
	0x5f, 0xc4, 0x74, 0x7a, 0xaa, 0x6d, 0xe2, 0x8a, 0x99, 0xf3, 0x7f, 0xff, 0xf0, 0xcf, 0x14, 0xfe,
	0x44, 0x9e, 0xcf, 0xa3, 0x7b, 0xbe, 0xe1, 0x71, 0xea, 0xae, 0xa5, 0x48, 0x05, 0x1a, 0x41, 0x98,
	0x2e, 0x33, 0xbf, 0x7f, 0x52, 0xfc, 0xba, 0x73, 0xb1, 0x1a, 0x07, 0x22, 0x10, 0x63, 0x92, 0xfd,
	0x6c, 0x41, 0x1d, 0x35, 0x54, 0x15, 0xb6, 0xbe, 0x49, 0x93, 0x54, 0x83, 0x61, 0x9c, 0xa4, 0x5e,
	0x14, 0x79, 0x69, 0x28, 0x62, 0xf5, 0x06, 0x59, 0xc2, 0xa5, 0xaa, 0xbb, 0x92, 0xaf, 0x45, 0x12,
	0xa6, 0x42, 0x6e, 0x8b, 0x97, 0xe1, 0x01, 0x98, 0x37, 0xf9, 0x80, 0xab, 0xa5, 0x17, 0x07, 0x1c,
	0x11, 0x5a, 0x0b, 0x29, 0x56, 0xb6, 0x36, 0xd0, 0x46, 0xbf, 0x18, 0xd5, 0xc3, 0x17, 0x1d, 0x80,
	0x98, 0x59, 0x9e, 0x16, 0xff, 0x81, 0xe1, 0xcd, 0xf3, 0xf9, 0x0a, 0x52, 0x1d, 0x1e, 0x42, 0x9b,
	0xa2, 0xd8, 0xcd, 0x81, 0x36, 0x32, 0x27, 0xbf, 0x5d, 0xb5, 0x07, 0x59, 0x59, 0xa1, 0xe1, 0x04,
	0xe0, 0x3b, 0x82, 0xad, 0x13, 0x89, 0x25, 0xc9, 0xbe, 0x14, 0x56, 0xa1, 0xf0, 0x14, 0x2c, 0x21,
	0x03, 0x2f, 0x0e, 0x9f, 0x68, 0x2d, 0xbb, 0x45, 0x2e, 0xab, 0x74, 0xdd, 0x25, 0x5c, 0xb2, 0x1a,
	0x81, 0x47, 0x60, 0x24, 0x3c, 0x7e, 0xe0, 0xd2, 0x6e, 0xff, 0xc0, 0x2a, 0x0d, 0xcf, 0xa1, 0x33,
	0xa7, 0xad, 0x13, 0xdb, 0x18, 0xe8, 0x23, 0x73, 0xf2, 0xbf, 0x16, 0x99, 0xb6, 0x75, 0x8b, 0xbb,
	0x24, 0xb3, 0x38, 0x95, 0x5b, 0x56, 0xf2, 0x38, 0x05, 0xab, 0x7a, 0x69, 0xbb, 0x43, 0x7f, 0xd3,
	0x2b, 0xfd, 0xd7, 0x15, 0x8d, 0xd5, 0xc8, 0xfe, 0x2d, 0x58, 0xd5, 0x91, 0xd8, 0x05, 0xfd, 0x91,
	0x6f, 0xd5, 0x29, 0xf3, 0x12, 0x8f, 0xa1, 0xbd, 0xf1, 0xa2, 0x8c, 0xab, 0x3b, 0xfe, 0xad, 0x85,
	0x2a, 0xbc, 0xac, 0x20, 0x2e, 0x9a, 0x53, 0xed, 0xb2, 0xb7, 0x7b, 0x77, 0x1a, 0xbb, 0xbd, 0xa3,
	0xbd, 0xee, 0x1d, 0xed, 0x6d, 0xef, 0x68, 0xcf, 0x1f, 0x4e, 0xc3, 0x37, 0xe8, 0xeb, 0x9e, 0x7d,
	0x06, 0x00, 0x00, 0xff, 0xff, 0x5e, 0x5c, 0x18, 0x7e, 0x68, 0x02, 0x00, 0x00,
}
