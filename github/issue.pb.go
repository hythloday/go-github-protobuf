// Code generated by protoc-gen-gogo.
// source: issue.proto
// DO NOT EDIT!

package github

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/protobuf/gogoproto"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type PullRequestRef struct {
	Url      string `protobuf:"bytes,1,opt,name=url,proto3" json:"url,omitempty"`
	HtmlUrl  string `protobuf:"bytes,2,opt,name=html_url,json=htmlUrl,proto3" json:"html_url,omitempty"`
	DiffUrl  string `protobuf:"bytes,3,opt,name=diff_url,json=diffUrl,proto3" json:"diff_url,omitempty"`
	PatchUrl string `protobuf:"bytes,4,opt,name=patch_url,json=patchUrl,proto3" json:"patch_url,omitempty"`
}

func (m *PullRequestRef) Reset()                    { *m = PullRequestRef{} }
func (m *PullRequestRef) String() string            { return proto.CompactTextString(m) }
func (*PullRequestRef) ProtoMessage()               {}
func (*PullRequestRef) Descriptor() ([]byte, []int) { return fileDescriptorIssue, []int{0} }

type Issue struct {
	Id            int32           `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Url           string          `protobuf:"bytes,2,opt,name=url,proto3" json:"url,omitempty"`
	RepositoryUrl string          `protobuf:"bytes,3,opt,name=repository_url,json=repositoryUrl,proto3" json:"repository_url,omitempty"`
	LabelsUrl     string          `protobuf:"bytes,4,opt,name=labels_url,json=labelsUrl,proto3" json:"labels_url,omitempty"`
	CommentsUrl   string          `protobuf:"bytes,5,opt,name=comments_url,json=commentsUrl,proto3" json:"comments_url,omitempty"`
	EventsUrl     string          `protobuf:"bytes,6,opt,name=events_url,json=eventsUrl,proto3" json:"events_url,omitempty"`
	HtmlUrl       string          `protobuf:"bytes,7,opt,name=html_url,json=htmlUrl,proto3" json:"html_url,omitempty"`
	Number        int32           `protobuf:"varint,8,opt,name=number,proto3" json:"number,omitempty"`
	State         string          `protobuf:"bytes,9,opt,name=state,proto3" json:"state,omitempty"`
	Title         string          `protobuf:"bytes,10,opt,name=title,proto3" json:"title,omitempty"`
	Body          string          `protobuf:"bytes,11,opt,name=body,proto3" json:"body,omitempty"`
	User          *User           `protobuf:"bytes,12,opt,name=user" json:"user,omitempty"`
	Labels        []*Label        `protobuf:"bytes,13,rep,name=labels" json:"labels,omitempty"`
	Assignee      *User           `protobuf:"bytes,14,opt,name=assignee" json:"assignee,omitempty"`
	Milestone     *Milestone      `protobuf:"bytes,15,opt,name=milestone" json:"milestone,omitempty"`
	Locked        bool            `protobuf:"varint,16,opt,name=locked,proto3" json:"locked,omitempty"`
	Comments      int32           `protobuf:"varint,17,opt,name=comments,proto3" json:"comments,omitempty"`
	ClosedAt      string          `protobuf:"bytes,18,opt,name=closed_at,json=closedAt,proto3" json:"closed_at,omitempty"`
	CreatedAt     string          `protobuf:"bytes,19,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	UpdatedAt     string          `protobuf:"bytes,20,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
	ClosedBy      *User           `protobuf:"bytes,21,opt,name=closed_by,json=closedBy" json:"closed_by,omitempty"`
	PullRequest   *PullRequestRef `protobuf:"bytes,22,opt,name=pull_request,json=pullRequest" json:"pull_request,omitempty"`
	Assignees     []*User         `protobuf:"bytes,23,rep,name=assignees" json:"assignees,omitempty"`
	Reactions     *Reactions      `protobuf:"bytes,24,opt,name=reactions" json:"reactions,omitempty"`
}

func (m *Issue) Reset()                    { *m = Issue{} }
func (m *Issue) String() string            { return proto.CompactTextString(m) }
func (*Issue) ProtoMessage()               {}
func (*Issue) Descriptor() ([]byte, []int) { return fileDescriptorIssue, []int{1} }

func init() {
	proto.RegisterType((*PullRequestRef)(nil), "github.PullRequestRef")
	proto.RegisterType((*Issue)(nil), "github.Issue")
}
func (m *PullRequestRef) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PullRequestRef) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Url) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintIssue(dAtA, i, uint64(len(m.Url)))
		i += copy(dAtA[i:], m.Url)
	}
	if len(m.HtmlUrl) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintIssue(dAtA, i, uint64(len(m.HtmlUrl)))
		i += copy(dAtA[i:], m.HtmlUrl)
	}
	if len(m.DiffUrl) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintIssue(dAtA, i, uint64(len(m.DiffUrl)))
		i += copy(dAtA[i:], m.DiffUrl)
	}
	if len(m.PatchUrl) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintIssue(dAtA, i, uint64(len(m.PatchUrl)))
		i += copy(dAtA[i:], m.PatchUrl)
	}
	return i, nil
}

func (m *Issue) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Issue) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintIssue(dAtA, i, uint64(m.Id))
	}
	if len(m.Url) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintIssue(dAtA, i, uint64(len(m.Url)))
		i += copy(dAtA[i:], m.Url)
	}
	if len(m.RepositoryUrl) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintIssue(dAtA, i, uint64(len(m.RepositoryUrl)))
		i += copy(dAtA[i:], m.RepositoryUrl)
	}
	if len(m.LabelsUrl) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintIssue(dAtA, i, uint64(len(m.LabelsUrl)))
		i += copy(dAtA[i:], m.LabelsUrl)
	}
	if len(m.CommentsUrl) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintIssue(dAtA, i, uint64(len(m.CommentsUrl)))
		i += copy(dAtA[i:], m.CommentsUrl)
	}
	if len(m.EventsUrl) > 0 {
		dAtA[i] = 0x32
		i++
		i = encodeVarintIssue(dAtA, i, uint64(len(m.EventsUrl)))
		i += copy(dAtA[i:], m.EventsUrl)
	}
	if len(m.HtmlUrl) > 0 {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintIssue(dAtA, i, uint64(len(m.HtmlUrl)))
		i += copy(dAtA[i:], m.HtmlUrl)
	}
	if m.Number != 0 {
		dAtA[i] = 0x40
		i++
		i = encodeVarintIssue(dAtA, i, uint64(m.Number))
	}
	if len(m.State) > 0 {
		dAtA[i] = 0x4a
		i++
		i = encodeVarintIssue(dAtA, i, uint64(len(m.State)))
		i += copy(dAtA[i:], m.State)
	}
	if len(m.Title) > 0 {
		dAtA[i] = 0x52
		i++
		i = encodeVarintIssue(dAtA, i, uint64(len(m.Title)))
		i += copy(dAtA[i:], m.Title)
	}
	if len(m.Body) > 0 {
		dAtA[i] = 0x5a
		i++
		i = encodeVarintIssue(dAtA, i, uint64(len(m.Body)))
		i += copy(dAtA[i:], m.Body)
	}
	if m.User != nil {
		dAtA[i] = 0x62
		i++
		i = encodeVarintIssue(dAtA, i, uint64(m.User.Size()))
		n1, err := m.User.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	if len(m.Labels) > 0 {
		for _, msg := range m.Labels {
			dAtA[i] = 0x6a
			i++
			i = encodeVarintIssue(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.Assignee != nil {
		dAtA[i] = 0x72
		i++
		i = encodeVarintIssue(dAtA, i, uint64(m.Assignee.Size()))
		n2, err := m.Assignee.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n2
	}
	if m.Milestone != nil {
		dAtA[i] = 0x7a
		i++
		i = encodeVarintIssue(dAtA, i, uint64(m.Milestone.Size()))
		n3, err := m.Milestone.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n3
	}
	if m.Locked {
		dAtA[i] = 0x80
		i++
		dAtA[i] = 0x1
		i++
		if m.Locked {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.Comments != 0 {
		dAtA[i] = 0x88
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintIssue(dAtA, i, uint64(m.Comments))
	}
	if len(m.ClosedAt) > 0 {
		dAtA[i] = 0x92
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintIssue(dAtA, i, uint64(len(m.ClosedAt)))
		i += copy(dAtA[i:], m.ClosedAt)
	}
	if len(m.CreatedAt) > 0 {
		dAtA[i] = 0x9a
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintIssue(dAtA, i, uint64(len(m.CreatedAt)))
		i += copy(dAtA[i:], m.CreatedAt)
	}
	if len(m.UpdatedAt) > 0 {
		dAtA[i] = 0xa2
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintIssue(dAtA, i, uint64(len(m.UpdatedAt)))
		i += copy(dAtA[i:], m.UpdatedAt)
	}
	if m.ClosedBy != nil {
		dAtA[i] = 0xaa
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintIssue(dAtA, i, uint64(m.ClosedBy.Size()))
		n4, err := m.ClosedBy.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n4
	}
	if m.PullRequest != nil {
		dAtA[i] = 0xb2
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintIssue(dAtA, i, uint64(m.PullRequest.Size()))
		n5, err := m.PullRequest.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n5
	}
	if len(m.Assignees) > 0 {
		for _, msg := range m.Assignees {
			dAtA[i] = 0xba
			i++
			dAtA[i] = 0x1
			i++
			i = encodeVarintIssue(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.Reactions != nil {
		dAtA[i] = 0xc2
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintIssue(dAtA, i, uint64(m.Reactions.Size()))
		n6, err := m.Reactions.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n6
	}
	return i, nil
}

func encodeFixed64Issue(dAtA []byte, offset int, v uint64) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	dAtA[offset+4] = uint8(v >> 32)
	dAtA[offset+5] = uint8(v >> 40)
	dAtA[offset+6] = uint8(v >> 48)
	dAtA[offset+7] = uint8(v >> 56)
	return offset + 8
}
func encodeFixed32Issue(dAtA []byte, offset int, v uint32) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	return offset + 4
}
func encodeVarintIssue(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *PullRequestRef) Size() (n int) {
	var l int
	_ = l
	l = len(m.Url)
	if l > 0 {
		n += 1 + l + sovIssue(uint64(l))
	}
	l = len(m.HtmlUrl)
	if l > 0 {
		n += 1 + l + sovIssue(uint64(l))
	}
	l = len(m.DiffUrl)
	if l > 0 {
		n += 1 + l + sovIssue(uint64(l))
	}
	l = len(m.PatchUrl)
	if l > 0 {
		n += 1 + l + sovIssue(uint64(l))
	}
	return n
}

func (m *Issue) Size() (n int) {
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovIssue(uint64(m.Id))
	}
	l = len(m.Url)
	if l > 0 {
		n += 1 + l + sovIssue(uint64(l))
	}
	l = len(m.RepositoryUrl)
	if l > 0 {
		n += 1 + l + sovIssue(uint64(l))
	}
	l = len(m.LabelsUrl)
	if l > 0 {
		n += 1 + l + sovIssue(uint64(l))
	}
	l = len(m.CommentsUrl)
	if l > 0 {
		n += 1 + l + sovIssue(uint64(l))
	}
	l = len(m.EventsUrl)
	if l > 0 {
		n += 1 + l + sovIssue(uint64(l))
	}
	l = len(m.HtmlUrl)
	if l > 0 {
		n += 1 + l + sovIssue(uint64(l))
	}
	if m.Number != 0 {
		n += 1 + sovIssue(uint64(m.Number))
	}
	l = len(m.State)
	if l > 0 {
		n += 1 + l + sovIssue(uint64(l))
	}
	l = len(m.Title)
	if l > 0 {
		n += 1 + l + sovIssue(uint64(l))
	}
	l = len(m.Body)
	if l > 0 {
		n += 1 + l + sovIssue(uint64(l))
	}
	if m.User != nil {
		l = m.User.Size()
		n += 1 + l + sovIssue(uint64(l))
	}
	if len(m.Labels) > 0 {
		for _, e := range m.Labels {
			l = e.Size()
			n += 1 + l + sovIssue(uint64(l))
		}
	}
	if m.Assignee != nil {
		l = m.Assignee.Size()
		n += 1 + l + sovIssue(uint64(l))
	}
	if m.Milestone != nil {
		l = m.Milestone.Size()
		n += 1 + l + sovIssue(uint64(l))
	}
	if m.Locked {
		n += 3
	}
	if m.Comments != 0 {
		n += 2 + sovIssue(uint64(m.Comments))
	}
	l = len(m.ClosedAt)
	if l > 0 {
		n += 2 + l + sovIssue(uint64(l))
	}
	l = len(m.CreatedAt)
	if l > 0 {
		n += 2 + l + sovIssue(uint64(l))
	}
	l = len(m.UpdatedAt)
	if l > 0 {
		n += 2 + l + sovIssue(uint64(l))
	}
	if m.ClosedBy != nil {
		l = m.ClosedBy.Size()
		n += 2 + l + sovIssue(uint64(l))
	}
	if m.PullRequest != nil {
		l = m.PullRequest.Size()
		n += 2 + l + sovIssue(uint64(l))
	}
	if len(m.Assignees) > 0 {
		for _, e := range m.Assignees {
			l = e.Size()
			n += 2 + l + sovIssue(uint64(l))
		}
	}
	if m.Reactions != nil {
		l = m.Reactions.Size()
		n += 2 + l + sovIssue(uint64(l))
	}
	return n
}

func sovIssue(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozIssue(x uint64) (n int) {
	return sovIssue(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *PullRequestRef) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowIssue
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PullRequestRef: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PullRequestRef: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Url", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIssue
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthIssue
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Url = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HtmlUrl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIssue
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthIssue
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.HtmlUrl = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DiffUrl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIssue
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthIssue
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DiffUrl = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PatchUrl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIssue
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthIssue
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PatchUrl = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipIssue(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthIssue
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Issue) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowIssue
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Issue: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Issue: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIssue
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Url", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIssue
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthIssue
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Url = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RepositoryUrl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIssue
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthIssue
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RepositoryUrl = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LabelsUrl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIssue
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthIssue
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LabelsUrl = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CommentsUrl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIssue
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthIssue
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CommentsUrl = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EventsUrl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIssue
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthIssue
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EventsUrl = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HtmlUrl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIssue
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthIssue
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.HtmlUrl = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Number", wireType)
			}
			m.Number = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIssue
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Number |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIssue
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthIssue
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.State = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIssue
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthIssue
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Title = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Body", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIssue
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthIssue
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Body = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field User", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIssue
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthIssue
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.User == nil {
				m.User = &User{}
			}
			if err := m.User.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Labels", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIssue
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthIssue
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Labels = append(m.Labels, &Label{})
			if err := m.Labels[len(m.Labels)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Assignee", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIssue
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthIssue
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Assignee == nil {
				m.Assignee = &User{}
			}
			if err := m.Assignee.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Milestone", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIssue
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthIssue
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Milestone == nil {
				m.Milestone = &Milestone{}
			}
			if err := m.Milestone.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 16:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Locked", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIssue
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Locked = bool(v != 0)
		case 17:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Comments", wireType)
			}
			m.Comments = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIssue
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Comments |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 18:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClosedAt", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIssue
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthIssue
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClosedAt = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 19:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatedAt", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIssue
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthIssue
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CreatedAt = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 20:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdatedAt", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIssue
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthIssue
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UpdatedAt = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 21:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClosedBy", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIssue
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthIssue
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ClosedBy == nil {
				m.ClosedBy = &User{}
			}
			if err := m.ClosedBy.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 22:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PullRequest", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIssue
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthIssue
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.PullRequest == nil {
				m.PullRequest = &PullRequestRef{}
			}
			if err := m.PullRequest.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 23:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Assignees", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIssue
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthIssue
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Assignees = append(m.Assignees, &User{})
			if err := m.Assignees[len(m.Assignees)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 24:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Reactions", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIssue
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthIssue
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Reactions == nil {
				m.Reactions = &Reactions{}
			}
			if err := m.Reactions.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipIssue(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthIssue
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipIssue(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowIssue
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowIssue
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowIssue
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthIssue
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowIssue
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipIssue(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthIssue = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowIssue   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("issue.proto", fileDescriptorIssue) }

var fileDescriptorIssue = []byte{
	// 542 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x6c, 0x93, 0x5d, 0x6f, 0xd3, 0x3e,
	0x14, 0xc6, 0xb7, 0xb5, 0xcd, 0x92, 0x93, 0xb6, 0xdb, 0xfc, 0xef, 0xbf, 0x98, 0x22, 0xaa, 0x32,
	0x09, 0x69, 0x20, 0xd1, 0x4a, 0x70, 0xc5, 0x25, 0xbb, 0x43, 0x02, 0x09, 0x59, 0xea, 0x75, 0x95,
	0x17, 0xb7, 0x8d, 0x48, 0xeb, 0x10, 0x3b, 0x48, 0xfd, 0x26, 0x88, 0x4f, 0xb4, 0x4b, 0x3e, 0x02,
	0x2f, 0x5f, 0x04, 0xfb, 0x38, 0x4e, 0x56, 0xb4, 0x8b, 0xaa, 0x7e, 0x9e, 0xdf, 0x13, 0x1f, 0x9d,
	0x93, 0x13, 0x08, 0x33, 0x29, 0x2b, 0x3e, 0x2f, 0x4a, 0xa1, 0x04, 0xf1, 0x36, 0x99, 0xda, 0x56,
	0xf1, 0xe4, 0x95, 0xfd, 0x9f, 0x27, 0x62, 0xb7, 0xd8, 0x88, 0x8d, 0x58, 0x20, 0x8e, 0xab, 0x35,
	0x2a, 0x14, 0x78, 0xb2, 0x8f, 0x4d, 0xa0, 0x92, 0xbc, 0xac, 0xcf, 0x17, 0xbb, 0x2c, 0xe7, 0x52,
	0x89, 0x3d, 0x77, 0x46, 0xc9, 0xa3, 0x44, 0x65, 0x62, 0x2f, 0x6b, 0x23, 0xcc, 0xa3, 0x98, 0xe7,
	0x56, 0x5c, 0x57, 0x30, 0xfc, 0x54, 0xe5, 0x39, 0xe3, 0x5f, 0x2a, 0xfd, 0x14, 0xe3, 0x6b, 0x72,
	0x09, 0x9d, 0xaa, 0xcc, 0xe9, 0xe9, 0xec, 0xf4, 0x26, 0x60, 0xe6, 0x48, 0x1e, 0x83, 0xbf, 0x55,
	0xbb, 0x7c, 0x65, 0xec, 0x33, 0xb4, 0xcf, 0x8d, 0x5e, 0x5a, 0x94, 0x66, 0xeb, 0x35, 0xa2, 0x8e,
	0x45, 0x46, 0x1b, 0xf4, 0x04, 0x82, 0x22, 0x52, 0xc9, 0x16, 0x59, 0x17, 0x99, 0x8f, 0x86, 0x86,
	0xd7, 0xdf, 0x3d, 0xe8, 0xbd, 0x37, 0x8d, 0x93, 0x21, 0x9c, 0x65, 0x29, 0x56, 0xeb, 0x31, 0x7d,
	0x72, 0xe5, 0xcf, 0xda, 0xf2, 0xcf, 0x61, 0x58, 0xf2, 0x42, 0xc8, 0x4c, 0x89, 0xf2, 0x70, 0xaf,
	0xd2, 0xa0, 0x75, 0x4d, 0xbd, 0xa7, 0x00, 0xd8, 0x98, 0xbc, 0x57, 0x30, 0xb0, 0x8e, 0xc1, 0xcf,
	0xa0, 0xaf, 0xa7, 0xb9, 0xe3, 0x7b, 0x65, 0x03, 0x3d, 0x0c, 0x84, 0xce, 0xab, 0x6f, 0xe0, 0x5f,
	0x9b, 0x80, 0x67, 0x6f, 0xb0, 0xce, 0xf2, 0x9f, 0x31, 0x9c, 0x1f, 0x8f, 0x61, 0x0c, 0xde, 0xbe,
	0xda, 0xc5, 0xbc, 0xa4, 0x3e, 0x36, 0x52, 0x2b, 0x32, 0x82, 0x9e, 0x54, 0x91, 0xe2, 0x34, 0xc0,
	0xbc, 0x15, 0xc6, 0x55, 0x99, 0xca, 0x39, 0x05, 0xeb, 0xa2, 0x20, 0x04, 0xba, 0xb1, 0x48, 0x0f,
	0x34, 0x44, 0x13, 0xcf, 0x64, 0x06, 0x5d, 0xf3, 0x6a, 0x69, 0x5f, 0x7b, 0xe1, 0xeb, 0xfe, 0xbc,
	0x5e, 0x8b, 0xa5, 0xf6, 0x18, 0x12, 0x3d, 0x1c, 0xcf, 0xf6, 0x48, 0x07, 0xb3, 0x8e, 0xce, 0x0c,
	0x5c, 0xe6, 0x83, 0x71, 0x59, 0x0d, 0xc9, 0x0d, 0xf8, 0x91, 0x94, 0xd9, 0x66, 0xcf, 0x39, 0x1d,
	0x3e, 0x70, 0x59, 0x43, 0xc9, 0x02, 0x82, 0x66, 0x83, 0xe8, 0x05, 0x46, 0xaf, 0x5c, 0xf4, 0xa3,
	0x03, 0xac, 0xcd, 0x98, 0xde, 0x73, 0x91, 0x7c, 0xe6, 0x29, 0xbd, 0xd4, 0x69, 0x9f, 0xd5, 0x8a,
	0x4c, 0xc0, 0x77, 0xc3, 0xa5, 0x57, 0x38, 0x95, 0x46, 0x9b, 0xdd, 0x48, 0x72, 0x21, 0x79, 0xba,
	0x8a, 0x14, 0x25, 0x76, 0x37, 0xac, 0xf1, 0x4e, 0x99, 0xd7, 0x90, 0xe8, 0x9d, 0x55, 0x96, 0xfe,
	0x67, 0x5f, 0x43, 0xed, 0x58, 0x5c, 0x15, 0xa9, 0xc3, 0x23, 0x8b, 0x6b, 0x47, 0xe3, 0x17, 0xcd,
	0xd5, 0xf1, 0x81, 0xfe, 0xff, 0x50, 0xab, 0x16, 0xdf, 0x1e, 0xc8, 0x5b, 0xe8, 0x17, 0x7a, 0xf7,
	0x57, 0xa5, 0x5d, 0x7e, 0x3a, 0xc6, 0xf4, 0xd8, 0xa5, 0x8f, 0xbf, 0x0b, 0x16, 0x16, 0xad, 0x26,
	0x2f, 0x21, 0x70, 0x13, 0x93, 0xf4, 0x11, 0x4e, 0xfe, 0xb8, 0x4a, 0x8b, 0xcd, 0x44, 0x9b, 0x4f,
	0x90, 0xd2, 0xe3, 0x89, 0x32, 0x07, 0x58, 0x9b, 0xb9, 0x1d, 0xdd, 0xfd, 0x9a, 0x9e, 0xdc, 0xfd,
	0x9e, 0x9e, 0xfe, 0xd0, 0xbf, 0x9f, 0xfa, 0xf7, 0xed, 0xcf, 0xf4, 0x24, 0xf6, 0xf0, 0x83, 0x7d,
	0xf3, 0x37, 0x00, 0x00, 0xff, 0xff, 0x15, 0x4c, 0x0d, 0x1b, 0x31, 0x04, 0x00, 0x00,
}
