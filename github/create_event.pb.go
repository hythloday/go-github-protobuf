// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: create_event.proto

package github

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/protobuf/gogoproto"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type CreateEvent struct {
	Ref          string        `protobuf:"bytes,1,opt,name=ref,proto3" json:"ref,omitempty"`
	RefType      string        `protobuf:"bytes,2,opt,name=ref_type,json=refType,proto3" json:"ref_type,omitempty"`
	MasterBranch string        `protobuf:"bytes,3,opt,name=master_branch,json=masterBranch,proto3" json:"master_branch,omitempty"`
	Description  string        `protobuf:"bytes,4,opt,name=description,proto3" json:"description,omitempty"`
	PusherType   string        `protobuf:"bytes,5,opt,name=pusher_type,json=pusherType,proto3" json:"pusher_type,omitempty"`
	Repository   *Repository   `protobuf:"bytes,6,opt,name=repository" json:"repository,omitempty"`
	Sender       *User         `protobuf:"bytes,7,opt,name=sender" json:"sender,omitempty"`
	Installation *Installation `protobuf:"bytes,8,opt,name=installation" json:"installation,omitempty"`
	Organization *User         `protobuf:"bytes,9,opt,name=organization" json:"organization,omitempty"`
}

func (m *CreateEvent) Reset()                    { *m = CreateEvent{} }
func (m *CreateEvent) String() string            { return proto.CompactTextString(m) }
func (*CreateEvent) ProtoMessage()               {}
func (*CreateEvent) Descriptor() ([]byte, []int) { return fileDescriptorCreateEvent, []int{0} }

func init() {
	proto.RegisterType((*CreateEvent)(nil), "github.CreateEvent")
}
func (m *CreateEvent) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CreateEvent) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Ref) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintCreateEvent(dAtA, i, uint64(len(m.Ref)))
		i += copy(dAtA[i:], m.Ref)
	}
	if len(m.RefType) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintCreateEvent(dAtA, i, uint64(len(m.RefType)))
		i += copy(dAtA[i:], m.RefType)
	}
	if len(m.MasterBranch) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintCreateEvent(dAtA, i, uint64(len(m.MasterBranch)))
		i += copy(dAtA[i:], m.MasterBranch)
	}
	if len(m.Description) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintCreateEvent(dAtA, i, uint64(len(m.Description)))
		i += copy(dAtA[i:], m.Description)
	}
	if len(m.PusherType) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintCreateEvent(dAtA, i, uint64(len(m.PusherType)))
		i += copy(dAtA[i:], m.PusherType)
	}
	if m.Repository != nil {
		dAtA[i] = 0x32
		i++
		i = encodeVarintCreateEvent(dAtA, i, uint64(m.Repository.Size()))
		n1, err := m.Repository.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	if m.Sender != nil {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintCreateEvent(dAtA, i, uint64(m.Sender.Size()))
		n2, err := m.Sender.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n2
	}
	if m.Installation != nil {
		dAtA[i] = 0x42
		i++
		i = encodeVarintCreateEvent(dAtA, i, uint64(m.Installation.Size()))
		n3, err := m.Installation.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n3
	}
	if m.Organization != nil {
		dAtA[i] = 0x4a
		i++
		i = encodeVarintCreateEvent(dAtA, i, uint64(m.Organization.Size()))
		n4, err := m.Organization.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n4
	}
	return i, nil
}

func encodeFixed64CreateEvent(dAtA []byte, offset int, v uint64) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	dAtA[offset+4] = uint8(v >> 32)
	dAtA[offset+5] = uint8(v >> 40)
	dAtA[offset+6] = uint8(v >> 48)
	dAtA[offset+7] = uint8(v >> 56)
	return offset + 8
}
func encodeFixed32CreateEvent(dAtA []byte, offset int, v uint32) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	return offset + 4
}
func encodeVarintCreateEvent(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *CreateEvent) Size() (n int) {
	var l int
	_ = l
	l = len(m.Ref)
	if l > 0 {
		n += 1 + l + sovCreateEvent(uint64(l))
	}
	l = len(m.RefType)
	if l > 0 {
		n += 1 + l + sovCreateEvent(uint64(l))
	}
	l = len(m.MasterBranch)
	if l > 0 {
		n += 1 + l + sovCreateEvent(uint64(l))
	}
	l = len(m.Description)
	if l > 0 {
		n += 1 + l + sovCreateEvent(uint64(l))
	}
	l = len(m.PusherType)
	if l > 0 {
		n += 1 + l + sovCreateEvent(uint64(l))
	}
	if m.Repository != nil {
		l = m.Repository.Size()
		n += 1 + l + sovCreateEvent(uint64(l))
	}
	if m.Sender != nil {
		l = m.Sender.Size()
		n += 1 + l + sovCreateEvent(uint64(l))
	}
	if m.Installation != nil {
		l = m.Installation.Size()
		n += 1 + l + sovCreateEvent(uint64(l))
	}
	if m.Organization != nil {
		l = m.Organization.Size()
		n += 1 + l + sovCreateEvent(uint64(l))
	}
	return n
}

func sovCreateEvent(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozCreateEvent(x uint64) (n int) {
	return sovCreateEvent(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *CreateEvent) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCreateEvent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreateEvent: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreateEvent: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ref", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCreateEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCreateEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Ref = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RefType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCreateEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCreateEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RefType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MasterBranch", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCreateEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCreateEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MasterBranch = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCreateEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCreateEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PusherType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCreateEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCreateEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PusherType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Repository", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCreateEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCreateEvent
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Repository == nil {
				m.Repository = &Repository{}
			}
			if err := m.Repository.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sender", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCreateEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCreateEvent
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Sender == nil {
				m.Sender = &User{}
			}
			if err := m.Sender.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Installation", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCreateEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCreateEvent
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Installation == nil {
				m.Installation = &Installation{}
			}
			if err := m.Installation.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Organization", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCreateEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCreateEvent
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Organization == nil {
				m.Organization = &User{}
			}
			if err := m.Organization.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCreateEvent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCreateEvent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipCreateEvent(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowCreateEvent
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCreateEvent
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCreateEvent
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthCreateEvent
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowCreateEvent
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipCreateEvent(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthCreateEvent = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowCreateEvent   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("create_event.proto", fileDescriptorCreateEvent) }

var fileDescriptorCreateEvent = []byte{
	// 326 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x6c, 0x91, 0xc1, 0x4e, 0xf2, 0x40,
	0x10, 0xc7, 0x29, 0x7c, 0x5f, 0x81, 0x69, 0x4d, 0xc8, 0x86, 0x43, 0xe5, 0x50, 0x89, 0x7a, 0xe0,
	0x22, 0x18, 0xbc, 0x78, 0xc6, 0x78, 0xf0, 0xda, 0xe8, 0x99, 0xb4, 0x65, 0x5a, 0x9a, 0x40, 0xb7,
	0x99, 0xdd, 0x9a, 0xe0, 0x93, 0xf8, 0x48, 0x1c, 0x7d, 0x04, 0xc5, 0x8b, 0x8f, 0x61, 0x98, 0x2d,
	0x5a, 0x12, 0x4f, 0x9d, 0xfd, 0xfd, 0x7f, 0x9b, 0x7f, 0x3a, 0x0b, 0x22, 0x26, 0x0c, 0x35, 0xce,
	0xf1, 0x19, 0x73, 0x3d, 0x2e, 0x48, 0x6a, 0x29, 0xec, 0x34, 0xd3, 0xcb, 0x32, 0x1a, 0x5c, 0x99,
	0xef, 0x38, 0x96, 0xeb, 0x49, 0x2a, 0x53, 0x39, 0xe1, 0x38, 0x2a, 0x13, 0x3e, 0xf1, 0x81, 0x27,
	0x73, 0x6d, 0x00, 0xa5, 0x42, 0xaa, 0xe6, 0x1e, 0x61, 0x21, 0x55, 0xa6, 0x25, 0x6d, 0x2a, 0x22,
	0xb2, 0x5c, 0xe9, 0x70, 0xb5, 0x0a, 0x75, 0x26, 0x73, 0xc3, 0xce, 0xbf, 0x9a, 0xe0, 0xdc, 0x71,
	0xff, 0xfd, 0xbe, 0x5e, 0xf4, 0xa0, 0x45, 0x98, 0x78, 0xd6, 0xd0, 0x1a, 0x75, 0x83, 0xfd, 0x28,
	0x4e, 0xa1, 0x43, 0x98, 0xcc, 0xf5, 0xa6, 0x40, 0xaf, 0xc9, 0xb8, 0x4d, 0x98, 0x3c, 0x6e, 0x0a,
	0x14, 0x17, 0x70, 0xb2, 0x0e, 0x95, 0x46, 0x9a, 0x47, 0x14, 0xe6, 0xf1, 0xd2, 0x6b, 0x71, 0xee,
	0x1a, 0x38, 0x63, 0x26, 0x86, 0xe0, 0x2c, 0x50, 0xc5, 0x94, 0x15, 0xfb, 0x5a, 0xef, 0x1f, 0x2b,
	0x75, 0x24, 0xce, 0xc0, 0x29, 0x4a, 0xb5, 0x44, 0x32, 0x25, 0xff, 0xd9, 0x00, 0x83, 0xb8, 0x67,
	0x0a, 0xf0, 0xfb, 0x33, 0x9e, 0x3d, 0xb4, 0x46, 0xce, 0x54, 0x8c, 0xab, 0xd5, 0x04, 0x3f, 0x49,
	0x50, 0xb3, 0xc4, 0x25, 0xd8, 0x0a, 0xf3, 0x05, 0x92, 0xd7, 0x66, 0xdf, 0x3d, 0xf8, 0x4f, 0x0a,
	0x29, 0xa8, 0x32, 0x71, 0x0b, 0x6e, 0x7d, 0x29, 0x5e, 0x87, 0xdd, 0xfe, 0xc1, 0x7d, 0xa8, 0x65,
	0xc1, 0x91, 0x29, 0xae, 0xc1, 0x95, 0x94, 0x86, 0x79, 0xf6, 0x62, 0x6e, 0x76, 0xff, 0x68, 0x39,
	0x32, 0x66, 0xfd, 0xed, 0x87, 0xdf, 0xd8, 0xee, 0x7c, 0xeb, 0x6d, 0xe7, 0x5b, 0xef, 0x3b, 0xdf,
	0x7a, 0xfd, 0xf4, 0x1b, 0x91, 0xcd, 0xef, 0x70, 0xf3, 0x1d, 0x00, 0x00, 0xff, 0xff, 0xd2, 0x0a,
	0x35, 0x75, 0x06, 0x02, 0x00, 0x00,
}
