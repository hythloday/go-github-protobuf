// Code generated by protoc-gen-gogo.
// source: reactions.proto
// DO NOT EDIT!

package github

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/protobuf/gogoproto"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type Reactions struct {
	Url        string `protobuf:"bytes,1,opt,name=url,proto3" json:"url,omitempty"`
	TotalCount int32  `protobuf:"varint,2,opt,name=total_count,json=totalCount,proto3" json:"total_count,omitempty"`
	Plus1      int32  `protobuf:"varint,3,opt,name=plus1,proto3" json:"+1"`
	Minus1     int32  `protobuf:"varint,4,opt,name=minus1,proto3" json:"-1"`
	Laugh      int32  `protobuf:"varint,5,opt,name=laugh,proto3" json:"laugh,omitempty"`
	Hooray     int32  `protobuf:"varint,6,opt,name=hooray,proto3" json:"hooray,omitempty"`
	Confused   int32  `protobuf:"varint,7,opt,name=confused,proto3" json:"confused,omitempty"`
	Heart      int32  `protobuf:"varint,8,opt,name=heart,proto3" json:"heart,omitempty"`
}

func (m *Reactions) Reset()                    { *m = Reactions{} }
func (m *Reactions) String() string            { return proto.CompactTextString(m) }
func (*Reactions) ProtoMessage()               {}
func (*Reactions) Descriptor() ([]byte, []int) { return fileDescriptorReactions, []int{0} }

func init() {
	proto.RegisterType((*Reactions)(nil), "github.Reactions")
}
func (m *Reactions) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Reactions) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Url) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintReactions(dAtA, i, uint64(len(m.Url)))
		i += copy(dAtA[i:], m.Url)
	}
	if m.TotalCount != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintReactions(dAtA, i, uint64(m.TotalCount))
	}
	if m.Plus1 != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintReactions(dAtA, i, uint64(m.Plus1))
	}
	if m.Minus1 != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintReactions(dAtA, i, uint64(m.Minus1))
	}
	if m.Laugh != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintReactions(dAtA, i, uint64(m.Laugh))
	}
	if m.Hooray != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintReactions(dAtA, i, uint64(m.Hooray))
	}
	if m.Confused != 0 {
		dAtA[i] = 0x38
		i++
		i = encodeVarintReactions(dAtA, i, uint64(m.Confused))
	}
	if m.Heart != 0 {
		dAtA[i] = 0x40
		i++
		i = encodeVarintReactions(dAtA, i, uint64(m.Heart))
	}
	return i, nil
}

func encodeFixed64Reactions(dAtA []byte, offset int, v uint64) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	dAtA[offset+4] = uint8(v >> 32)
	dAtA[offset+5] = uint8(v >> 40)
	dAtA[offset+6] = uint8(v >> 48)
	dAtA[offset+7] = uint8(v >> 56)
	return offset + 8
}
func encodeFixed32Reactions(dAtA []byte, offset int, v uint32) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	return offset + 4
}
func encodeVarintReactions(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *Reactions) Size() (n int) {
	var l int
	_ = l
	l = len(m.Url)
	if l > 0 {
		n += 1 + l + sovReactions(uint64(l))
	}
	if m.TotalCount != 0 {
		n += 1 + sovReactions(uint64(m.TotalCount))
	}
	if m.Plus1 != 0 {
		n += 1 + sovReactions(uint64(m.Plus1))
	}
	if m.Minus1 != 0 {
		n += 1 + sovReactions(uint64(m.Minus1))
	}
	if m.Laugh != 0 {
		n += 1 + sovReactions(uint64(m.Laugh))
	}
	if m.Hooray != 0 {
		n += 1 + sovReactions(uint64(m.Hooray))
	}
	if m.Confused != 0 {
		n += 1 + sovReactions(uint64(m.Confused))
	}
	if m.Heart != 0 {
		n += 1 + sovReactions(uint64(m.Heart))
	}
	return n
}

func sovReactions(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozReactions(x uint64) (n int) {
	return sovReactions(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Reactions) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowReactions
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Reactions: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Reactions: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Url", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReactions
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthReactions
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Url = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalCount", wireType)
			}
			m.TotalCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReactions
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TotalCount |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Plus1", wireType)
			}
			m.Plus1 = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReactions
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Plus1 |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Minus1", wireType)
			}
			m.Minus1 = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReactions
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Minus1 |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Laugh", wireType)
			}
			m.Laugh = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReactions
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Laugh |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Hooray", wireType)
			}
			m.Hooray = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReactions
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Hooray |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Confused", wireType)
			}
			m.Confused = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReactions
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Confused |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Heart", wireType)
			}
			m.Heart = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReactions
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Heart |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipReactions(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthReactions
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipReactions(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowReactions
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowReactions
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowReactions
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthReactions
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowReactions
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipReactions(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthReactions = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowReactions   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("reactions.proto", fileDescriptorReactions) }

var fileDescriptorReactions = []byte{
	// 252 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x44, 0x8f, 0x5f, 0x4a, 0xc3, 0x40,
	0x10, 0xc6, 0x9b, 0xd6, 0xac, 0xed, 0xf8, 0xa0, 0x0c, 0x45, 0x96, 0x22, 0xa9, 0xf8, 0x24, 0x48,
	0x5b, 0x82, 0x37, 0xa8, 0x37, 0xd8, 0x0b, 0xc8, 0x26, 0xa6, 0x49, 0x20, 0xcd, 0x94, 0xcd, 0xee,
	0x83, 0x37, 0xf1, 0x48, 0x7d, 0xf4, 0x00, 0x22, 0xfe, 0x79, 0xf3, 0x14, 0x66, 0x67, 0xab, 0x7d,
	0x18, 0x76, 0x7e, 0xdf, 0x8f, 0xfd, 0x60, 0xe0, 0xdc, 0x14, 0x3a, 0xb7, 0x35, 0xb5, 0xdd, 0x72,
	0x67, 0xc8, 0x12, 0x8a, 0xb2, 0xb6, 0x95, 0xcb, 0x66, 0x8b, 0xf0, 0x2e, 0x73, 0xda, 0xae, 0x4a,
	0x2a, 0x69, 0xc5, 0x3a, 0x73, 0x1b, 0x26, 0x06, 0xde, 0xc2, 0xb7, 0x9b, 0xb7, 0x08, 0x26, 0xea,
	0xaf, 0x0a, 0x2f, 0x60, 0xe4, 0x4c, 0x23, 0xa3, 0xeb, 0xe8, 0x76, 0xa2, 0xfc, 0x8a, 0x73, 0x38,
	0xb3, 0x64, 0x75, 0xf3, 0x98, 0x93, 0x6b, 0xad, 0x1c, 0xf6, 0x26, 0x56, 0xc0, 0xd1, 0x83, 0x4f,
	0xf0, 0x0a, 0xe2, 0x5d, 0xe3, 0xba, 0x54, 0x8e, 0xbc, 0x5a, 0x8b, 0x9f, 0xf7, 0xf9, 0xf0, 0x2e,
	0x55, 0x21, 0xc4, 0x04, 0xc4, 0xb6, 0x6e, 0xbd, 0x3e, 0x39, 0xea, 0x45, 0xaa, 0x0e, 0x29, 0x4e,
	0x21, 0x6e, 0xb4, 0x2b, 0x2b, 0x19, 0x73, 0x71, 0x00, 0xbc, 0x04, 0x51, 0x11, 0x19, 0xfd, 0x2c,
	0x05, 0xc7, 0x07, 0xc2, 0x19, 0x8c, 0x73, 0x6a, 0x37, 0xae, 0x2b, 0x9e, 0xe4, 0x29, 0x9b, 0x7f,
	0xf6, 0x4d, 0x55, 0xa1, 0x8d, 0x95, 0xe3, 0xd0, 0xc4, 0xb0, 0x9e, 0xee, 0x3f, 0x93, 0xc1, 0xfe,
	0x2b, 0x89, 0x5e, 0xfb, 0xf9, 0xe8, 0xe7, 0xe5, 0x3b, 0x19, 0x64, 0x82, 0x6f, 0xbf, 0xff, 0x0d,
	0x00, 0x00, 0xff, 0xff, 0x2b, 0x77, 0x15, 0xba, 0x45, 0x01, 0x00, 0x00,
}
