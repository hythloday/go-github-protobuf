// Code generated by protoc-gen-gogo.
// source: milestone_event.proto
// DO NOT EDIT!

package github

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/protobuf/gogoproto"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type MilestoneChange struct {
	From string `protobuf:"bytes,1,opt,name=from,proto3" json:"from,omitempty"`
}

func (m *MilestoneChange) Reset()                    { *m = MilestoneChange{} }
func (m *MilestoneChange) String() string            { return proto.CompactTextString(m) }
func (*MilestoneChange) ProtoMessage()               {}
func (*MilestoneChange) Descriptor() ([]byte, []int) { return fileDescriptorMilestoneEvent, []int{0} }

type MilestoneEvent struct {
	Action       string                      `protobuf:"bytes,1,opt,name=action,proto3" json:"action,omitempty"`
	Milestone    *Milestone                  `protobuf:"bytes,2,opt,name=milestone" json:"milestone,omitempty"`
	Repository   *Repository                 `protobuf:"bytes,3,opt,name=repository" json:"repository,omitempty"`
	Organization *User                       `protobuf:"bytes,4,opt,name=organization" json:"organization,omitempty"`
	Sender       *User                       `protobuf:"bytes,5,opt,name=sender" json:"sender,omitempty"`
	Changes      map[string]*MilestoneChange `protobuf:"bytes,6,rep,name=changes" json:"changes,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value"`
	Installation *Installation               `protobuf:"bytes,7,opt,name=installation" json:"installation,omitempty"`
}

func (m *MilestoneEvent) Reset()                    { *m = MilestoneEvent{} }
func (m *MilestoneEvent) String() string            { return proto.CompactTextString(m) }
func (*MilestoneEvent) ProtoMessage()               {}
func (*MilestoneEvent) Descriptor() ([]byte, []int) { return fileDescriptorMilestoneEvent, []int{1} }

func init() {
	proto.RegisterType((*MilestoneChange)(nil), "github.MilestoneChange")
	proto.RegisterType((*MilestoneEvent)(nil), "github.MilestoneEvent")
}
func (m *MilestoneChange) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MilestoneChange) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.From) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintMilestoneEvent(dAtA, i, uint64(len(m.From)))
		i += copy(dAtA[i:], m.From)
	}
	return i, nil
}

func (m *MilestoneEvent) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MilestoneEvent) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Action) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintMilestoneEvent(dAtA, i, uint64(len(m.Action)))
		i += copy(dAtA[i:], m.Action)
	}
	if m.Milestone != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintMilestoneEvent(dAtA, i, uint64(m.Milestone.Size()))
		n1, err := m.Milestone.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	if m.Repository != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintMilestoneEvent(dAtA, i, uint64(m.Repository.Size()))
		n2, err := m.Repository.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n2
	}
	if m.Organization != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintMilestoneEvent(dAtA, i, uint64(m.Organization.Size()))
		n3, err := m.Organization.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n3
	}
	if m.Sender != nil {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintMilestoneEvent(dAtA, i, uint64(m.Sender.Size()))
		n4, err := m.Sender.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n4
	}
	if len(m.Changes) > 0 {
		for k, _ := range m.Changes {
			dAtA[i] = 0x32
			i++
			v := m.Changes[k]
			msgSize := 0
			if v != nil {
				msgSize = v.Size()
				msgSize += 1 + sovMilestoneEvent(uint64(msgSize))
			}
			mapSize := 1 + len(k) + sovMilestoneEvent(uint64(len(k))) + msgSize
			i = encodeVarintMilestoneEvent(dAtA, i, uint64(mapSize))
			dAtA[i] = 0xa
			i++
			i = encodeVarintMilestoneEvent(dAtA, i, uint64(len(k)))
			i += copy(dAtA[i:], k)
			if v != nil {
				dAtA[i] = 0x12
				i++
				i = encodeVarintMilestoneEvent(dAtA, i, uint64(v.Size()))
				n5, err := v.MarshalTo(dAtA[i:])
				if err != nil {
					return 0, err
				}
				i += n5
			}
		}
	}
	if m.Installation != nil {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintMilestoneEvent(dAtA, i, uint64(m.Installation.Size()))
		n6, err := m.Installation.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n6
	}
	return i, nil
}

func encodeFixed64MilestoneEvent(dAtA []byte, offset int, v uint64) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	dAtA[offset+4] = uint8(v >> 32)
	dAtA[offset+5] = uint8(v >> 40)
	dAtA[offset+6] = uint8(v >> 48)
	dAtA[offset+7] = uint8(v >> 56)
	return offset + 8
}
func encodeFixed32MilestoneEvent(dAtA []byte, offset int, v uint32) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	return offset + 4
}
func encodeVarintMilestoneEvent(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *MilestoneChange) Size() (n int) {
	var l int
	_ = l
	l = len(m.From)
	if l > 0 {
		n += 1 + l + sovMilestoneEvent(uint64(l))
	}
	return n
}

func (m *MilestoneEvent) Size() (n int) {
	var l int
	_ = l
	l = len(m.Action)
	if l > 0 {
		n += 1 + l + sovMilestoneEvent(uint64(l))
	}
	if m.Milestone != nil {
		l = m.Milestone.Size()
		n += 1 + l + sovMilestoneEvent(uint64(l))
	}
	if m.Repository != nil {
		l = m.Repository.Size()
		n += 1 + l + sovMilestoneEvent(uint64(l))
	}
	if m.Organization != nil {
		l = m.Organization.Size()
		n += 1 + l + sovMilestoneEvent(uint64(l))
	}
	if m.Sender != nil {
		l = m.Sender.Size()
		n += 1 + l + sovMilestoneEvent(uint64(l))
	}
	if len(m.Changes) > 0 {
		for k, v := range m.Changes {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
				l += 1 + sovMilestoneEvent(uint64(l))
			}
			mapEntrySize := 1 + len(k) + sovMilestoneEvent(uint64(len(k))) + l
			n += mapEntrySize + 1 + sovMilestoneEvent(uint64(mapEntrySize))
		}
	}
	if m.Installation != nil {
		l = m.Installation.Size()
		n += 1 + l + sovMilestoneEvent(uint64(l))
	}
	return n
}

func sovMilestoneEvent(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozMilestoneEvent(x uint64) (n int) {
	return sovMilestoneEvent(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *MilestoneChange) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMilestoneEvent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MilestoneChange: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MilestoneChange: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field From", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMilestoneEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMilestoneEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.From = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMilestoneEvent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMilestoneEvent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MilestoneEvent) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMilestoneEvent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MilestoneEvent: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MilestoneEvent: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Action", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMilestoneEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMilestoneEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Action = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Milestone", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMilestoneEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMilestoneEvent
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Milestone == nil {
				m.Milestone = &Milestone{}
			}
			if err := m.Milestone.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Repository", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMilestoneEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMilestoneEvent
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Repository == nil {
				m.Repository = &Repository{}
			}
			if err := m.Repository.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Organization", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMilestoneEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMilestoneEvent
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Organization == nil {
				m.Organization = &User{}
			}
			if err := m.Organization.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sender", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMilestoneEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMilestoneEvent
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Sender == nil {
				m.Sender = &User{}
			}
			if err := m.Sender.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Changes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMilestoneEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMilestoneEvent
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			var keykey uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMilestoneEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				keykey |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			var stringLenmapkey uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMilestoneEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLenmapkey |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLenmapkey := int(stringLenmapkey)
			if intStringLenmapkey < 0 {
				return ErrInvalidLengthMilestoneEvent
			}
			postStringIndexmapkey := iNdEx + intStringLenmapkey
			if postStringIndexmapkey > l {
				return io.ErrUnexpectedEOF
			}
			mapkey := string(dAtA[iNdEx:postStringIndexmapkey])
			iNdEx = postStringIndexmapkey
			if m.Changes == nil {
				m.Changes = make(map[string]*MilestoneChange)
			}
			if iNdEx < postIndex {
				var valuekey uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowMilestoneEvent
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					valuekey |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				var mapmsglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowMilestoneEvent
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					mapmsglen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if mapmsglen < 0 {
					return ErrInvalidLengthMilestoneEvent
				}
				postmsgIndex := iNdEx + mapmsglen
				if mapmsglen < 0 {
					return ErrInvalidLengthMilestoneEvent
				}
				if postmsgIndex > l {
					return io.ErrUnexpectedEOF
				}
				mapvalue := &MilestoneChange{}
				if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
					return err
				}
				iNdEx = postmsgIndex
				m.Changes[mapkey] = mapvalue
			} else {
				var mapvalue *MilestoneChange
				m.Changes[mapkey] = mapvalue
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Installation", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMilestoneEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMilestoneEvent
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Installation == nil {
				m.Installation = &Installation{}
			}
			if err := m.Installation.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMilestoneEvent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMilestoneEvent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipMilestoneEvent(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowMilestoneEvent
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMilestoneEvent
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMilestoneEvent
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthMilestoneEvent
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowMilestoneEvent
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipMilestoneEvent(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthMilestoneEvent = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowMilestoneEvent   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("milestone_event.proto", fileDescriptorMilestoneEvent) }

var fileDescriptorMilestoneEvent = []byte{
	// 368 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x6c, 0x51, 0xcd, 0x4e, 0xea, 0x40,
	0x14, 0xa6, 0x14, 0x4a, 0x38, 0xb7, 0xb9, 0x70, 0x4f, 0xb8, 0xf7, 0x36, 0x2c, 0x08, 0x41, 0x4d,
	0xdc, 0x50, 0x0c, 0x6e, 0x88, 0x89, 0x1b, 0x0d, 0x0b, 0x17, 0x6e, 0x6a, 0x5c, 0x9b, 0x82, 0x43,
	0x69, 0x2c, 0x33, 0x64, 0x66, 0x4a, 0x82, 0x4f, 0xe2, 0x7b, 0xf8, 0x12, 0x2c, 0x7d, 0x04, 0x7f,
	0x5e, 0xc4, 0x32, 0x9d, 0x96, 0x12, 0x5c, 0x4c, 0xe6, 0xfc, 0x7c, 0xdf, 0x37, 0xdf, 0x39, 0x03,
	0x7f, 0x17, 0x61, 0x44, 0x84, 0x64, 0x94, 0x3c, 0x90, 0x15, 0xa1, 0xd2, 0x5d, 0x72, 0x26, 0x19,
	0x5a, 0x41, 0x28, 0xe7, 0xf1, 0xa4, 0xdd, 0x4f, 0x6f, 0x77, 0xca, 0x16, 0x83, 0x80, 0x05, 0x6c,
	0xa0, 0xda, 0x93, 0x78, 0xa6, 0x32, 0x95, 0xa8, 0x28, 0xa5, 0xb5, 0x1b, 0xb9, 0x9a, 0x2e, 0x60,
	0x48, 0x85, 0xf4, 0xa3, 0xc8, 0x97, 0x21, 0xa3, 0xba, 0x06, 0xb1, 0x20, 0x5c, 0xc7, 0x4d, 0x4e,
	0x96, 0x4c, 0x84, 0x92, 0xf1, 0x75, 0x5a, 0xe9, 0x9d, 0x40, 0xe3, 0x36, 0x13, 0xb9, 0x9e, 0xfb,
	0x34, 0x20, 0x88, 0x50, 0x99, 0x71, 0xb6, 0x70, 0x8c, 0xae, 0x71, 0x5a, 0xf7, 0x54, 0xdc, 0x7b,
	0x35, 0xe1, 0x77, 0x8e, 0x1b, 0x6f, 0x9d, 0xe3, 0x3f, 0xb0, 0xfc, 0xe9, 0xf6, 0x1d, 0x0d, 0xd4,
	0x19, 0x0e, 0xa0, 0x9e, 0xdb, 0x72, 0xca, 0x49, 0xeb, 0xd7, 0xf0, 0x8f, 0xab, 0xe7, 0xca, 0x25,
	0xbc, 0x1d, 0x06, 0x87, 0x00, 0x3b, 0x5b, 0x8e, 0xa9, 0x18, 0x98, 0x31, 0xbc, 0xbc, 0xe3, 0x15,
	0x50, 0x78, 0x06, 0x36, 0xe3, 0x81, 0x4f, 0xc3, 0x67, 0x35, 0xaa, 0x53, 0x51, 0x2c, 0x3b, 0x63,
	0xdd, 0x27, 0x23, 0x7b, 0x7b, 0x08, 0x3c, 0x06, 0x4b, 0x10, 0xfa, 0x48, 0xb8, 0x53, 0xfd, 0x01,
	0xab, 0x7b, 0x78, 0x09, 0xb5, 0xa9, 0xda, 0x82, 0x70, 0xac, 0xae, 0x99, 0xc0, 0x8e, 0x0e, 0xac,
	0xab, 0xe9, 0xdd, 0x74, 0x57, 0x62, 0x4c, 0x65, 0xe2, 0x2c, 0xe3, 0xe0, 0x08, 0xec, 0xe2, 0x0f,
	0x38, 0x35, 0xf5, 0x54, 0x2b, 0xd3, 0xb8, 0x29, 0xf4, 0xbc, 0x3d, 0x64, 0xfb, 0x0e, 0xec, 0xa2,
	0x24, 0x36, 0xc1, 0x7c, 0x22, 0x6b, 0xbd, 0xda, 0x6d, 0x88, 0x7d, 0xa8, 0xae, 0xfc, 0x28, 0xce,
	0x76, 0xfa, 0xff, 0xc0, 0x58, 0xca, 0xf7, 0x52, 0xd4, 0x45, 0x79, 0x64, 0x5c, 0xb5, 0x36, 0x1f,
	0x9d, 0xd2, 0xe6, 0xb3, 0x63, 0xbc, 0x25, 0xe7, 0x3d, 0x39, 0x2f, 0x5f, 0x9d, 0xd2, 0xc4, 0x52,
	0x3f, 0x7f, 0xfe, 0x1d, 0x00, 0x00, 0xff, 0xff, 0x12, 0x26, 0xc8, 0x45, 0x8c, 0x02, 0x00, 0x00,
}
