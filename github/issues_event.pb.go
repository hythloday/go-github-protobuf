// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: issues_event.proto

package github

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/protobuf/gogoproto"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type IssuesEvent struct {
	Action       string        `protobuf:"bytes,1,opt,name=action,proto3" json:"action,omitempty"`
	Issue        *Issue        `protobuf:"bytes,2,opt,name=issue" json:"issue,omitempty"`
	Repository   *Repository   `protobuf:"bytes,3,opt,name=repository" json:"repository,omitempty"`
	Sender       *User         `protobuf:"bytes,4,opt,name=sender" json:"sender,omitempty"`
	Installation *Installation `protobuf:"bytes,5,opt,name=installation" json:"installation,omitempty"`
	Organization *User         `protobuf:"bytes,6,opt,name=organization" json:"organization,omitempty"`
}

func (m *IssuesEvent) Reset()                    { *m = IssuesEvent{} }
func (m *IssuesEvent) String() string            { return proto.CompactTextString(m) }
func (*IssuesEvent) ProtoMessage()               {}
func (*IssuesEvent) Descriptor() ([]byte, []int) { return fileDescriptorIssuesEvent, []int{0} }

func init() {
	proto.RegisterType((*IssuesEvent)(nil), "github.IssuesEvent")
}
func (m *IssuesEvent) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *IssuesEvent) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Action) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintIssuesEvent(dAtA, i, uint64(len(m.Action)))
		i += copy(dAtA[i:], m.Action)
	}
	if m.Issue != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintIssuesEvent(dAtA, i, uint64(m.Issue.Size()))
		n1, err := m.Issue.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	if m.Repository != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintIssuesEvent(dAtA, i, uint64(m.Repository.Size()))
		n2, err := m.Repository.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n2
	}
	if m.Sender != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintIssuesEvent(dAtA, i, uint64(m.Sender.Size()))
		n3, err := m.Sender.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n3
	}
	if m.Installation != nil {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintIssuesEvent(dAtA, i, uint64(m.Installation.Size()))
		n4, err := m.Installation.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n4
	}
	if m.Organization != nil {
		dAtA[i] = 0x32
		i++
		i = encodeVarintIssuesEvent(dAtA, i, uint64(m.Organization.Size()))
		n5, err := m.Organization.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n5
	}
	return i, nil
}

func encodeFixed64IssuesEvent(dAtA []byte, offset int, v uint64) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	dAtA[offset+4] = uint8(v >> 32)
	dAtA[offset+5] = uint8(v >> 40)
	dAtA[offset+6] = uint8(v >> 48)
	dAtA[offset+7] = uint8(v >> 56)
	return offset + 8
}
func encodeFixed32IssuesEvent(dAtA []byte, offset int, v uint32) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	return offset + 4
}
func encodeVarintIssuesEvent(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *IssuesEvent) Size() (n int) {
	var l int
	_ = l
	l = len(m.Action)
	if l > 0 {
		n += 1 + l + sovIssuesEvent(uint64(l))
	}
	if m.Issue != nil {
		l = m.Issue.Size()
		n += 1 + l + sovIssuesEvent(uint64(l))
	}
	if m.Repository != nil {
		l = m.Repository.Size()
		n += 1 + l + sovIssuesEvent(uint64(l))
	}
	if m.Sender != nil {
		l = m.Sender.Size()
		n += 1 + l + sovIssuesEvent(uint64(l))
	}
	if m.Installation != nil {
		l = m.Installation.Size()
		n += 1 + l + sovIssuesEvent(uint64(l))
	}
	if m.Organization != nil {
		l = m.Organization.Size()
		n += 1 + l + sovIssuesEvent(uint64(l))
	}
	return n
}

func sovIssuesEvent(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozIssuesEvent(x uint64) (n int) {
	return sovIssuesEvent(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *IssuesEvent) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowIssuesEvent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: IssuesEvent: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: IssuesEvent: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Action", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIssuesEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthIssuesEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Action = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Issue", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIssuesEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthIssuesEvent
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Issue == nil {
				m.Issue = &Issue{}
			}
			if err := m.Issue.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Repository", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIssuesEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthIssuesEvent
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Repository == nil {
				m.Repository = &Repository{}
			}
			if err := m.Repository.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sender", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIssuesEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthIssuesEvent
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Sender == nil {
				m.Sender = &User{}
			}
			if err := m.Sender.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Installation", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIssuesEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthIssuesEvent
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Installation == nil {
				m.Installation = &Installation{}
			}
			if err := m.Installation.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Organization", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIssuesEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthIssuesEvent
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Organization == nil {
				m.Organization = &User{}
			}
			if err := m.Organization.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipIssuesEvent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthIssuesEvent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipIssuesEvent(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowIssuesEvent
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowIssuesEvent
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowIssuesEvent
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthIssuesEvent
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowIssuesEvent
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipIssuesEvent(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthIssuesEvent = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowIssuesEvent   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("issues_event.proto", fileDescriptorIssuesEvent) }

var fileDescriptorIssuesEvent = []byte{
	// 276 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x6c, 0x90, 0xc1, 0x4a, 0x03, 0x31,
	0x10, 0x86, 0x9b, 0x6a, 0x17, 0x9c, 0x5d, 0x41, 0x86, 0x22, 0x4b, 0x0f, 0xa1, 0xa8, 0x87, 0x5e,
	0xdc, 0x4a, 0xbd, 0x78, 0x16, 0x3c, 0x78, 0x0d, 0x78, 0x96, 0xdd, 0x1a, 0xd7, 0x40, 0x4d, 0x4a,
	0x92, 0x15, 0xf4, 0x29, 0x3c, 0xfa, 0x48, 0x3d, 0xfa, 0x08, 0xba, 0xbe, 0x88, 0x74, 0x92, 0xd6,
	0x2d, 0x78, 0xca, 0xfc, 0xf3, 0x7f, 0x33, 0xf3, 0x13, 0x40, 0xe5, 0x5c, 0x23, 0xdd, 0xbd, 0x7c,
	0x91, 0xda, 0x17, 0x4b, 0x6b, 0xbc, 0xc1, 0xa4, 0x56, 0xfe, 0xa9, 0xa9, 0x46, 0xe7, 0xe1, 0x2d,
	0xe6, 0xe6, 0x79, 0x5a, 0x9b, 0xda, 0x4c, 0xc9, 0xae, 0x9a, 0x47, 0x52, 0x24, 0xa8, 0x0a, 0x63,
	0x23, 0x68, 0x9c, 0xb4, 0xb1, 0x4e, 0x69, 0x6d, 0x14, 0x47, 0x56, 0x2e, 0x8d, 0x53, 0xde, 0xd8,
	0xd7, 0xd8, 0x41, 0xa5, 0x9d, 0x2f, 0x17, 0x8b, 0xd2, 0x2b, 0xa3, 0x43, 0xef, 0xe4, 0xbd, 0x0f,
	0xe9, 0x2d, 0x85, 0xb9, 0x59, 0x67, 0xc1, 0x63, 0x48, 0xca, 0xf9, 0xda, 0xcf, 0xd9, 0x98, 0x4d,
	0x0e, 0x44, 0x54, 0x78, 0x0a, 0x03, 0x5a, 0x9e, 0xf7, 0xc7, 0x6c, 0x92, 0xce, 0x0e, 0x8b, 0x98,
	0x92, 0x66, 0x45, 0xf0, 0x70, 0x06, 0xf0, 0x77, 0x34, 0xdf, 0x23, 0x12, 0x37, 0xa4, 0xd8, 0x3a,
	0xa2, 0x43, 0xe1, 0x19, 0x24, 0x4e, 0xea, 0x07, 0x69, 0xf3, 0x7d, 0xe2, 0xb3, 0x0d, 0x7f, 0xe7,
	0xa4, 0x15, 0xd1, 0xc3, 0x2b, 0xc8, 0xba, 0xe1, 0xf3, 0x01, 0xb1, 0xc3, 0x6d, 0x8a, 0x8e, 0x27,
	0x76, 0x48, 0xbc, 0x80, 0xcc, 0xd8, 0xba, 0xd4, 0xea, 0x2d, 0x4c, 0x26, 0xff, 0x5c, 0xd9, 0x21,
	0xae, 0x87, 0xab, 0x6f, 0xde, 0x5b, 0xb5, 0x9c, 0x7d, 0xb6, 0x9c, 0x7d, 0xb5, 0x9c, 0x7d, 0xfc,
	0xf0, 0x5e, 0x95, 0xd0, 0x7f, 0x5d, 0xfe, 0x06, 0x00, 0x00, 0xff, 0xff, 0x7f, 0x9d, 0xf3, 0x95,
	0xbb, 0x01, 0x00, 0x00,
}
