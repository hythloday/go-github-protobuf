// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: download_event.proto

package github

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/protobuf/gogoproto"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type Download struct {
	Url           string `protobuf:"bytes,1,opt,name=url,proto3" json:"url,omitempty"`
	HtmlUrl       string `protobuf:"bytes,2,opt,name=html_url,json=htmlUrl,proto3" json:"html_url,omitempty"`
	Id            int32  `protobuf:"varint,3,opt,name=id,proto3" json:"id,omitempty"`
	Name          string `protobuf:"bytes,4,opt,name=name,proto3" json:"name,omitempty"`
	Description   string `protobuf:"bytes,5,opt,name=description,proto3" json:"description,omitempty"`
	FileSize      int32  `protobuf:"varint,6,opt,name=size,proto3" json:"size,omitempty"`
	DownloadCount int32  `protobuf:"varint,7,opt,name=download_count,json=downloadCount,proto3" json:"download_count,omitempty"`
	ContentType   string `protobuf:"bytes,8,opt,name=content_type,json=contentType,proto3" json:"content_type,omitempty"`
}

func (m *Download) Reset()                    { *m = Download{} }
func (m *Download) String() string            { return proto.CompactTextString(m) }
func (*Download) ProtoMessage()               {}
func (*Download) Descriptor() ([]byte, []int) { return fileDescriptorDownloadEvent, []int{0} }

type DownloadEvent struct {
	Download     *Download     `protobuf:"bytes,1,opt,name=download" json:"download,omitempty"`
	Installation *Installation `protobuf:"bytes,2,opt,name=installation" json:"installation,omitempty"`
}

func (m *DownloadEvent) Reset()                    { *m = DownloadEvent{} }
func (m *DownloadEvent) String() string            { return proto.CompactTextString(m) }
func (*DownloadEvent) ProtoMessage()               {}
func (*DownloadEvent) Descriptor() ([]byte, []int) { return fileDescriptorDownloadEvent, []int{1} }

func init() {
	proto.RegisterType((*Download)(nil), "github.Download")
	proto.RegisterType((*DownloadEvent)(nil), "github.DownloadEvent")
}
func (m *Download) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Download) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Url) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintDownloadEvent(dAtA, i, uint64(len(m.Url)))
		i += copy(dAtA[i:], m.Url)
	}
	if len(m.HtmlUrl) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintDownloadEvent(dAtA, i, uint64(len(m.HtmlUrl)))
		i += copy(dAtA[i:], m.HtmlUrl)
	}
	if m.Id != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintDownloadEvent(dAtA, i, uint64(m.Id))
	}
	if len(m.Name) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintDownloadEvent(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	if len(m.Description) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintDownloadEvent(dAtA, i, uint64(len(m.Description)))
		i += copy(dAtA[i:], m.Description)
	}
	if m.FileSize != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintDownloadEvent(dAtA, i, uint64(m.FileSize))
	}
	if m.DownloadCount != 0 {
		dAtA[i] = 0x38
		i++
		i = encodeVarintDownloadEvent(dAtA, i, uint64(m.DownloadCount))
	}
	if len(m.ContentType) > 0 {
		dAtA[i] = 0x42
		i++
		i = encodeVarintDownloadEvent(dAtA, i, uint64(len(m.ContentType)))
		i += copy(dAtA[i:], m.ContentType)
	}
	return i, nil
}

func (m *DownloadEvent) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DownloadEvent) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Download != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintDownloadEvent(dAtA, i, uint64(m.Download.Size()))
		n1, err := m.Download.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	if m.Installation != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintDownloadEvent(dAtA, i, uint64(m.Installation.Size()))
		n2, err := m.Installation.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n2
	}
	return i, nil
}

func encodeFixed64DownloadEvent(dAtA []byte, offset int, v uint64) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	dAtA[offset+4] = uint8(v >> 32)
	dAtA[offset+5] = uint8(v >> 40)
	dAtA[offset+6] = uint8(v >> 48)
	dAtA[offset+7] = uint8(v >> 56)
	return offset + 8
}
func encodeFixed32DownloadEvent(dAtA []byte, offset int, v uint32) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	return offset + 4
}
func encodeVarintDownloadEvent(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *Download) Size() (n int) {
	var l int
	_ = l
	l = len(m.Url)
	if l > 0 {
		n += 1 + l + sovDownloadEvent(uint64(l))
	}
	l = len(m.HtmlUrl)
	if l > 0 {
		n += 1 + l + sovDownloadEvent(uint64(l))
	}
	if m.Id != 0 {
		n += 1 + sovDownloadEvent(uint64(m.Id))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovDownloadEvent(uint64(l))
	}
	l = len(m.Description)
	if l > 0 {
		n += 1 + l + sovDownloadEvent(uint64(l))
	}
	if m.FileSize != 0 {
		n += 1 + sovDownloadEvent(uint64(m.FileSize))
	}
	if m.DownloadCount != 0 {
		n += 1 + sovDownloadEvent(uint64(m.DownloadCount))
	}
	l = len(m.ContentType)
	if l > 0 {
		n += 1 + l + sovDownloadEvent(uint64(l))
	}
	return n
}

func (m *DownloadEvent) Size() (n int) {
	var l int
	_ = l
	if m.Download != nil {
		l = m.Download.Size()
		n += 1 + l + sovDownloadEvent(uint64(l))
	}
	if m.Installation != nil {
		l = m.Installation.Size()
		n += 1 + l + sovDownloadEvent(uint64(l))
	}
	return n
}

func sovDownloadEvent(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozDownloadEvent(x uint64) (n int) {
	return sovDownloadEvent(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Download) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDownloadEvent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Download: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Download: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Url", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDownloadEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDownloadEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Url = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HtmlUrl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDownloadEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDownloadEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.HtmlUrl = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDownloadEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDownloadEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDownloadEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDownloadEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDownloadEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FileSize", wireType)
			}
			m.FileSize = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDownloadEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FileSize |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DownloadCount", wireType)
			}
			m.DownloadCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDownloadEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DownloadCount |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContentType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDownloadEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDownloadEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ContentType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDownloadEvent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDownloadEvent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DownloadEvent) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDownloadEvent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DownloadEvent: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DownloadEvent: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Download", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDownloadEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDownloadEvent
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Download == nil {
				m.Download = &Download{}
			}
			if err := m.Download.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Installation", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDownloadEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDownloadEvent
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Installation == nil {
				m.Installation = &Installation{}
			}
			if err := m.Installation.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDownloadEvent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDownloadEvent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipDownloadEvent(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowDownloadEvent
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowDownloadEvent
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowDownloadEvent
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthDownloadEvent
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowDownloadEvent
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipDownloadEvent(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthDownloadEvent = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowDownloadEvent   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("download_event.proto", fileDescriptorDownloadEvent) }

var fileDescriptorDownloadEvent = []byte{
	// 333 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x54, 0x51, 0xcb, 0x6e, 0xea, 0x30,
	0x10, 0xc5, 0x3c, 0x73, 0xcd, 0x43, 0x68, 0xc4, 0xc2, 0x97, 0x45, 0x6e, 0x2e, 0x52, 0x25, 0x16,
	0x2d, 0x48, 0x74, 0xd3, 0x35, 0x7d, 0x48, 0xdd, 0xa6, 0xed, 0x1a, 0x85, 0xc4, 0x05, 0x4b, 0xc6,
	0x8e, 0x82, 0x53, 0x04, 0x5f, 0xd2, 0x4f, 0x62, 0xd9, 0x2f, 0xa8, 0xda, 0x74, 0xd5, 0xbf, 0xa8,
	0x3c, 0x21, 0x88, 0xae, 0x3c, 0x73, 0xce, 0x99, 0x39, 0x9a, 0x63, 0xda, 0x8b, 0xf4, 0x46, 0x49,
	0x1d, 0x44, 0x33, 0xfe, 0xc2, 0x95, 0x19, 0xc5, 0x89, 0x36, 0x1a, 0xea, 0x0b, 0x61, 0x96, 0xe9,
	0xbc, 0x7f, 0x91, 0xbf, 0xa3, 0x50, 0xaf, 0xc6, 0x0b, 0xbd, 0xd0, 0x63, 0xa4, 0xe7, 0xe9, 0x33,
	0x76, 0xd8, 0x60, 0x95, 0x8f, 0xf5, 0x41, 0xa8, 0xb5, 0x09, 0xa4, 0x0c, 0x8c, 0xd0, 0x2a, 0xc7,
	0x06, 0xdf, 0x84, 0x3a, 0x37, 0x07, 0x0f, 0xe8, 0xd2, 0x4a, 0x9a, 0x48, 0x46, 0x3c, 0x32, 0xfc,
	0xe3, 0xdb, 0x12, 0xfe, 0x52, 0x67, 0x69, 0x56, 0x72, 0x66, 0xe1, 0x32, 0xc2, 0x0d, 0xdb, 0x3f,
	0x25, 0x12, 0x3a, 0xb4, 0x2c, 0x22, 0x56, 0xf1, 0xc8, 0xb0, 0xe6, 0x97, 0x45, 0x04, 0x40, 0xab,
	0x2a, 0x58, 0x71, 0x56, 0x45, 0x19, 0xd6, 0xe0, 0xd1, 0x66, 0xc4, 0xd7, 0x61, 0x22, 0x62, 0x6b,
	0xc9, 0x6a, 0x48, 0x9d, 0x42, 0xe0, 0xd1, 0xea, 0x5a, 0xec, 0x38, 0xab, 0xdb, 0x3d, 0xd3, 0x56,
	0xf6, 0xfe, 0xcf, 0xb9, 0x13, 0x92, 0x3f, 0x88, 0x1d, 0xf7, 0x91, 0x81, 0x33, 0xda, 0x39, 0x86,
	0x10, 0xea, 0x54, 0x19, 0xd6, 0x40, 0xcf, 0x76, 0x81, 0x5e, 0x5b, 0x10, 0xfe, 0xd3, 0x56, 0xa8,
	0x95, 0xe1, 0xca, 0xcc, 0xcc, 0x36, 0xe6, 0xcc, 0xc9, 0xbd, 0x0e, 0xd8, 0xe3, 0x36, 0xe6, 0x83,
	0x0d, 0x6d, 0x17, 0xa7, 0xde, 0xda, 0x34, 0xe1, 0x9c, 0x3a, 0xc5, 0x12, 0x3c, 0xba, 0x39, 0xe9,
	0x8e, 0x0e, 0x91, 0x16, 0x42, 0xff, 0xa8, 0x80, 0x2b, 0xda, 0x3a, 0x0d, 0x10, 0xf3, 0x68, 0x4e,
	0x7a, 0xc5, 0xc4, 0xfd, 0x09, 0xe7, 0xff, 0x52, 0x4e, 0x7b, 0xfb, 0x4f, 0xb7, 0xb4, 0xcf, 0x5c,
	0xf2, 0x96, 0xb9, 0xe4, 0x23, 0x73, 0xc9, 0xeb, 0x97, 0x5b, 0x9a, 0xd7, 0xf1, 0x07, 0x2e, 0x7f,
	0x02, 0x00, 0x00, 0xff, 0xff, 0x6b, 0x3b, 0x2e, 0x05, 0xe4, 0x01, 0x00, 0x00,
}
